syntax = "proto3";

package corks.v1;

import "cedar/v3/entity.proto";
import "cedar/v3/entity_id.proto";
import "cedar/v3/policy.proto";
import "google/protobuf/any.proto";

option go_package = "corks/v1;corkspb";

// Encodes a cork's metadata and its signature.
//
// A cork can be further restricted by its bearer by appending additional
// caveats and creating a new signature.
//
// All existing caveats and other values are not open for extension or
// modification once signed.
message Cork {
  // The unique identifier of the cork and its root key.
  bytes id = 1;

  // The encoded issuer of the cork.
  google.protobuf.Any issuer = 2;

  // The encoded bearer of the cork.
  google.protobuf.Any bearer = 3;

  // The encoded audience of the cork.
  optional google.protobuf.Any audience = 4;

  // The encoded claims of the cork.
  optional google.protobuf.Any claims = 5;

  // The encoded caveats of the cork.
  repeated google.protobuf.Any caveats = 6;

  // The final signature of the cork.
  bytes signature = 999;
}
