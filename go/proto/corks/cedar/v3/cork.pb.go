// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: corks/cedar/v3/cork.proto

package cedarcorkspb

import (
	v3 "github.com/celest-dev/corks/go/proto/cedar/v3"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A bearer token that can be used to make claims about an entity for the purpose
// of authorization and authentication w/ Cedar.
type CedarCork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the cork.
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The issuing authority of the cork.
	Issuer *v3.EntityUid `protobuf:"bytes,2,opt,name=issuer,proto3" json:"issuer,omitempty"`
	// The bearer of the cork, about which [claims] can be made.
	Bearer *v3.EntityUid `protobuf:"bytes,3,opt,name=bearer,proto3" json:"bearer,omitempty"`
	// The intended audience of the cork.
	Audience *v3.EntityUid `protobuf:"bytes,4,opt,name=audience,proto3,oneof" json:"audience,omitempty"`
	// Claims made about the [bearer] of the cork.
	Claims *v3.Entity `protobuf:"bytes,5,opt,name=claims,proto3,oneof" json:"claims,omitempty"`
	// The caveats to this cork's validity and usage.
	//
	// Caveats are structured conditions which must be met for the cork to be considered
	// valid and for its claims to be considered true.
	//
	// Effectively, these form the body of a `forbid unless` policy AND'd together.
	Caveats []*v3.Expr `protobuf:"bytes,6,rep,name=caveats,proto3" json:"caveats,omitempty"`
	// The final signature of the cork.
	Signature []byte `protobuf:"bytes,999,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *CedarCork) Reset() {
	*x = CedarCork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_corks_cedar_v3_cork_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CedarCork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CedarCork) ProtoMessage() {}

func (x *CedarCork) ProtoReflect() protoreflect.Message {
	mi := &file_corks_cedar_v3_cork_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CedarCork.ProtoReflect.Descriptor instead.
func (*CedarCork) Descriptor() ([]byte, []int) {
	return file_corks_cedar_v3_cork_proto_rawDescGZIP(), []int{0}
}

func (x *CedarCork) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CedarCork) GetIssuer() *v3.EntityUid {
	if x != nil {
		return x.Issuer
	}
	return nil
}

func (x *CedarCork) GetBearer() *v3.EntityUid {
	if x != nil {
		return x.Bearer
	}
	return nil
}

func (x *CedarCork) GetAudience() *v3.EntityUid {
	if x != nil {
		return x.Audience
	}
	return nil
}

func (x *CedarCork) GetClaims() *v3.Entity {
	if x != nil {
		return x.Claims
	}
	return nil
}

func (x *CedarCork) GetCaveats() []*v3.Expr {
	if x != nil {
		return x.Caveats
	}
	return nil
}

func (x *CedarCork) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

var File_corks_cedar_v3_cork_proto protoreflect.FileDescriptor

var file_corks_cedar_v3_cork_proto_rawDesc = []byte{
	0x0a, 0x19, 0x63, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2f, 0x76, 0x33,
	0x2f, 0x63, 0x6f, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x63, 0x6f, 0x72,
	0x6b, 0x73, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x33, 0x1a, 0x15, 0x63, 0x65, 0x64,
	0x61, 0x72, 0x2f, 0x76, 0x33, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x19, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2f, 0x76, 0x33, 0x2f, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x63,
	0x65, 0x64, 0x61, 0x72, 0x2f, 0x76, 0x33, 0x2f, 0x65, 0x78, 0x70, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbb, 0x02,
	0x0a, 0x09, 0x43, 0x65, 0x64, 0x61, 0x72, 0x43, 0x6f, 0x72, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x65,
	0x64, 0x61, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x69, 0x64,
	0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x06, 0x62, 0x65, 0x61, 0x72,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72,
	0x2e, 0x76, 0x33, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x69, 0x64, 0x52, 0x06, 0x62,
	0x65, 0x61, 0x72, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x08, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e,
	0x76, 0x33, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x69, 0x64, 0x48, 0x00, 0x52, 0x08,
	0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x06, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x65,
	0x64, 0x61, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x01, 0x52,
	0x06, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x07, 0x63, 0x61,
	0x76, 0x65, 0x61, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x65,
	0x64, 0x61, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x07, 0x63, 0x61, 0x76,
	0x65, 0x61, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0xe7, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x42, 0x96, 0x01, 0x0a, 0x12,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x6b, 0x73, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e,
	0x76, 0x33, 0x42, 0x09, 0x43, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x1b, 0x63, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2f, 0x76, 0x33, 0x3b,
	0x63, 0x65, 0x64, 0x61, 0x72, 0x63, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x62, 0xa2, 0x02, 0x03, 0x43,
	0x43, 0x58, 0xaa, 0x02, 0x0e, 0x43, 0x6f, 0x72, 0x6b, 0x73, 0x2e, 0x43, 0x65, 0x64, 0x61, 0x72,
	0x2e, 0x56, 0x33, 0xca, 0x02, 0x0e, 0x43, 0x6f, 0x72, 0x6b, 0x73, 0x5c, 0x43, 0x65, 0x64, 0x61,
	0x72, 0x5c, 0x56, 0x33, 0xe2, 0x02, 0x1a, 0x43, 0x6f, 0x72, 0x6b, 0x73, 0x5c, 0x43, 0x65, 0x64,
	0x61, 0x72, 0x5c, 0x56, 0x33, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x10, 0x43, 0x6f, 0x72, 0x6b, 0x73, 0x3a, 0x3a, 0x43, 0x65, 0x64, 0x61, 0x72,
	0x3a, 0x3a, 0x56, 0x33, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_corks_cedar_v3_cork_proto_rawDescOnce sync.Once
	file_corks_cedar_v3_cork_proto_rawDescData = file_corks_cedar_v3_cork_proto_rawDesc
)

func file_corks_cedar_v3_cork_proto_rawDescGZIP() []byte {
	file_corks_cedar_v3_cork_proto_rawDescOnce.Do(func() {
		file_corks_cedar_v3_cork_proto_rawDescData = protoimpl.X.CompressGZIP(file_corks_cedar_v3_cork_proto_rawDescData)
	})
	return file_corks_cedar_v3_cork_proto_rawDescData
}

var file_corks_cedar_v3_cork_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_corks_cedar_v3_cork_proto_goTypes = []any{
	(*CedarCork)(nil),    // 0: corks.cedar.v3.CedarCork
	(*v3.EntityUid)(nil), // 1: cedar.v3.EntityUid
	(*v3.Entity)(nil),    // 2: cedar.v3.Entity
	(*v3.Expr)(nil),      // 3: cedar.v3.Expr
}
var file_corks_cedar_v3_cork_proto_depIdxs = []int32{
	1, // 0: corks.cedar.v3.CedarCork.issuer:type_name -> cedar.v3.EntityUid
	1, // 1: corks.cedar.v3.CedarCork.bearer:type_name -> cedar.v3.EntityUid
	1, // 2: corks.cedar.v3.CedarCork.audience:type_name -> cedar.v3.EntityUid
	2, // 3: corks.cedar.v3.CedarCork.claims:type_name -> cedar.v3.Entity
	3, // 4: corks.cedar.v3.CedarCork.caveats:type_name -> cedar.v3.Expr
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_corks_cedar_v3_cork_proto_init() }
func file_corks_cedar_v3_cork_proto_init() {
	if File_corks_cedar_v3_cork_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_corks_cedar_v3_cork_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CedarCork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_corks_cedar_v3_cork_proto_msgTypes[0].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_corks_cedar_v3_cork_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_corks_cedar_v3_cork_proto_goTypes,
		DependencyIndexes: file_corks_cedar_v3_cork_proto_depIdxs,
		MessageInfos:      file_corks_cedar_v3_cork_proto_msgTypes,
	}.Build()
	File_corks_cedar_v3_cork_proto = out.File
	file_corks_cedar_v3_cork_proto_rawDesc = nil
	file_corks_cedar_v3_cork_proto_goTypes = nil
	file_corks_cedar_v3_cork_proto_depIdxs = nil
}
