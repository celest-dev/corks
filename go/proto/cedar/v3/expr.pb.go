// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: cedar/v3/expr.proto

package cedarv3

import (
	_ "github.com/celest-dev/corks/go/proto/dart"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Variable int32

const (
	Variable_VARIABLE_UNSPECIFIED Variable = 0
	Variable_VARIABLE_PRINCIPAL   Variable = 1
	Variable_VARIABLE_ACTION      Variable = 2
	Variable_VARIABLE_RESOURCE    Variable = 3
	Variable_VARIABLE_CONTEXT     Variable = 4
)

// Enum value maps for Variable.
var (
	Variable_name = map[int32]string{
		0: "VARIABLE_UNSPECIFIED",
		1: "VARIABLE_PRINCIPAL",
		2: "VARIABLE_ACTION",
		3: "VARIABLE_RESOURCE",
		4: "VARIABLE_CONTEXT",
	}
	Variable_value = map[string]int32{
		"VARIABLE_UNSPECIFIED": 0,
		"VARIABLE_PRINCIPAL":   1,
		"VARIABLE_ACTION":      2,
		"VARIABLE_RESOURCE":    3,
		"VARIABLE_CONTEXT":     4,
	}
)

func (x Variable) Enum() *Variable {
	p := new(Variable)
	*p = x
	return p
}

func (x Variable) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Variable) Descriptor() protoreflect.EnumDescriptor {
	return file_cedar_v3_expr_proto_enumTypes[0].Descriptor()
}

func (Variable) Type() protoreflect.EnumType {
	return &file_cedar_v3_expr_proto_enumTypes[0]
}

func (x Variable) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Variable.Descriptor instead.
func (Variable) EnumDescriptor() ([]byte, []int) {
	return file_cedar_v3_expr_proto_rawDescGZIP(), []int{0}
}

type SlotId int32

const (
	SlotId_SLOT_ID_UNSPECIFIED SlotId = 0
	SlotId_SLOT_ID_PRINCIPAL   SlotId = 1
	SlotId_SLOT_ID_RESOURCE    SlotId = 2
)

// Enum value maps for SlotId.
var (
	SlotId_name = map[int32]string{
		0: "SLOT_ID_UNSPECIFIED",
		1: "SLOT_ID_PRINCIPAL",
		2: "SLOT_ID_RESOURCE",
	}
	SlotId_value = map[string]int32{
		"SLOT_ID_UNSPECIFIED": 0,
		"SLOT_ID_PRINCIPAL":   1,
		"SLOT_ID_RESOURCE":    2,
	}
)

func (x SlotId) Enum() *SlotId {
	p := new(SlotId)
	*p = x
	return p
}

func (x SlotId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SlotId) Descriptor() protoreflect.EnumDescriptor {
	return file_cedar_v3_expr_proto_enumTypes[1].Descriptor()
}

func (SlotId) Type() protoreflect.EnumType {
	return &file_cedar_v3_expr_proto_enumTypes[1]
}

func (x SlotId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SlotId.Descriptor instead.
func (SlotId) EnumDescriptor() ([]byte, []int) {
	return file_cedar_v3_expr_proto_rawDescGZIP(), []int{1}
}

type Expr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Expr:
	//
	//	*Expr_Value
	//	*Expr_Var
	//	*Expr_Slot
	//	*Expr_Unknown
	//	*Expr_Not
	//	*Expr_Neg
	//	*Expr_Equals
	//	*Expr_NotEquals
	//	*Expr_In
	//	*Expr_LessThan
	//	*Expr_LessThanOrEquals
	//	*Expr_GreaterThan
	//	*Expr_GreaterThanOrEquals
	//	*Expr_And
	//	*Expr_Or
	//	*Expr_Plus
	//	*Expr_Minus
	//	*Expr_Times
	//	*Expr_Contains
	//	*Expr_ContainsAll
	//	*Expr_ContainsAny
	//	*Expr_GetAttribute
	//	*Expr_HasAttribute
	//	*Expr_Like
	//	*Expr_Is
	//	*Expr_IfThenElse
	//	*Expr_Set
	//	*Expr_Record
	//	*Expr_FuncCall
	Expr isExpr_Expr `protobuf_oneof:"expr"`
}

func (x *Expr) Reset() {
	*x = Expr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cedar_v3_expr_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr) ProtoMessage() {}

func (x *Expr) ProtoReflect() protoreflect.Message {
	mi := &file_cedar_v3_expr_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr.ProtoReflect.Descriptor instead.
func (*Expr) Descriptor() ([]byte, []int) {
	return file_cedar_v3_expr_proto_rawDescGZIP(), []int{0}
}

func (m *Expr) GetExpr() isExpr_Expr {
	if m != nil {
		return m.Expr
	}
	return nil
}

func (x *Expr) GetValue() *ExprValue {
	if x, ok := x.GetExpr().(*Expr_Value); ok {
		return x.Value
	}
	return nil
}

func (x *Expr) GetVar() *ExprVar {
	if x, ok := x.GetExpr().(*Expr_Var); ok {
		return x.Var
	}
	return nil
}

func (x *Expr) GetSlot() *ExprSlot {
	if x, ok := x.GetExpr().(*Expr_Slot); ok {
		return x.Slot
	}
	return nil
}

func (x *Expr) GetUnknown() *ExprUnknown {
	if x, ok := x.GetExpr().(*Expr_Unknown); ok {
		return x.Unknown
	}
	return nil
}

func (x *Expr) GetNot() *ExprNot {
	if x, ok := x.GetExpr().(*Expr_Not); ok {
		return x.Not
	}
	return nil
}

func (x *Expr) GetNeg() *ExprNeg {
	if x, ok := x.GetExpr().(*Expr_Neg); ok {
		return x.Neg
	}
	return nil
}

func (x *Expr) GetEquals() *ExprEquals {
	if x, ok := x.GetExpr().(*Expr_Equals); ok {
		return x.Equals
	}
	return nil
}

func (x *Expr) GetNotEquals() *ExprNotEquals {
	if x, ok := x.GetExpr().(*Expr_NotEquals); ok {
		return x.NotEquals
	}
	return nil
}

func (x *Expr) GetIn() *ExprIn {
	if x, ok := x.GetExpr().(*Expr_In); ok {
		return x.In
	}
	return nil
}

func (x *Expr) GetLessThan() *ExprLessThan {
	if x, ok := x.GetExpr().(*Expr_LessThan); ok {
		return x.LessThan
	}
	return nil
}

func (x *Expr) GetLessThanOrEquals() *ExprLessThanOrEquals {
	if x, ok := x.GetExpr().(*Expr_LessThanOrEquals); ok {
		return x.LessThanOrEquals
	}
	return nil
}

func (x *Expr) GetGreaterThan() *ExprGreaterThan {
	if x, ok := x.GetExpr().(*Expr_GreaterThan); ok {
		return x.GreaterThan
	}
	return nil
}

func (x *Expr) GetGreaterThanOrEquals() *ExprGreaterThanOrEquals {
	if x, ok := x.GetExpr().(*Expr_GreaterThanOrEquals); ok {
		return x.GreaterThanOrEquals
	}
	return nil
}

func (x *Expr) GetAnd() *ExprAnd {
	if x, ok := x.GetExpr().(*Expr_And); ok {
		return x.And
	}
	return nil
}

func (x *Expr) GetOr() *ExprOr {
	if x, ok := x.GetExpr().(*Expr_Or); ok {
		return x.Or
	}
	return nil
}

func (x *Expr) GetPlus() *ExprPlus {
	if x, ok := x.GetExpr().(*Expr_Plus); ok {
		return x.Plus
	}
	return nil
}

func (x *Expr) GetMinus() *ExprMinus {
	if x, ok := x.GetExpr().(*Expr_Minus); ok {
		return x.Minus
	}
	return nil
}

func (x *Expr) GetTimes() *ExprTimes {
	if x, ok := x.GetExpr().(*Expr_Times); ok {
		return x.Times
	}
	return nil
}

func (x *Expr) GetContains() *ExprContains {
	if x, ok := x.GetExpr().(*Expr_Contains); ok {
		return x.Contains
	}
	return nil
}

func (x *Expr) GetContainsAll() *ExprContainsAll {
	if x, ok := x.GetExpr().(*Expr_ContainsAll); ok {
		return x.ContainsAll
	}
	return nil
}

func (x *Expr) GetContainsAny() *ExprContainsAny {
	if x, ok := x.GetExpr().(*Expr_ContainsAny); ok {
		return x.ContainsAny
	}
	return nil
}

func (x *Expr) GetGetAttribute() *ExprGetAttribute {
	if x, ok := x.GetExpr().(*Expr_GetAttribute); ok {
		return x.GetAttribute
	}
	return nil
}

func (x *Expr) GetHasAttribute() *ExprHasAttribute {
	if x, ok := x.GetExpr().(*Expr_HasAttribute); ok {
		return x.HasAttribute
	}
	return nil
}

func (x *Expr) GetLike() *ExprLike {
	if x, ok := x.GetExpr().(*Expr_Like); ok {
		return x.Like
	}
	return nil
}

func (x *Expr) GetIs() *ExprIs {
	if x, ok := x.GetExpr().(*Expr_Is); ok {
		return x.Is
	}
	return nil
}

func (x *Expr) GetIfThenElse() *ExprIfThenElse {
	if x, ok := x.GetExpr().(*Expr_IfThenElse); ok {
		return x.IfThenElse
	}
	return nil
}

func (x *Expr) GetSet() *ExprSet {
	if x, ok := x.GetExpr().(*Expr_Set); ok {
		return x.Set
	}
	return nil
}

func (x *Expr) GetRecord() *ExprRecord {
	if x, ok := x.GetExpr().(*Expr_Record); ok {
		return x.Record
	}
	return nil
}

func (x *Expr) GetFuncCall() *ExprFuncCall {
	if x, ok := x.GetExpr().(*Expr_FuncCall); ok {
		return x.FuncCall
	}
	return nil
}

type isExpr_Expr interface {
	isExpr_Expr()
}

type Expr_Value struct {
	Value *ExprValue `protobuf:"bytes,1,opt,name=value,proto3,oneof"`
}

type Expr_Var struct {
	Var *ExprVar `protobuf:"bytes,2,opt,name=var,proto3,oneof"`
}

type Expr_Slot struct {
	Slot *ExprSlot `protobuf:"bytes,3,opt,name=slot,proto3,oneof"`
}

type Expr_Unknown struct {
	Unknown *ExprUnknown `protobuf:"bytes,4,opt,name=unknown,proto3,oneof"`
}

type Expr_Not struct {
	Not *ExprNot `protobuf:"bytes,5,opt,name=not,proto3,oneof"`
}

type Expr_Neg struct {
	Neg *ExprNeg `protobuf:"bytes,6,opt,name=neg,proto3,oneof"`
}

type Expr_Equals struct {
	Equals *ExprEquals `protobuf:"bytes,7,opt,name=equals,proto3,oneof"`
}

type Expr_NotEquals struct {
	NotEquals *ExprNotEquals `protobuf:"bytes,8,opt,name=not_equals,json=notEquals,proto3,oneof"`
}

type Expr_In struct {
	In *ExprIn `protobuf:"bytes,9,opt,name=in,proto3,oneof"`
}

type Expr_LessThan struct {
	LessThan *ExprLessThan `protobuf:"bytes,10,opt,name=less_than,json=lessThan,proto3,oneof"`
}

type Expr_LessThanOrEquals struct {
	LessThanOrEquals *ExprLessThanOrEquals `protobuf:"bytes,11,opt,name=less_than_or_equals,json=lessThanOrEquals,proto3,oneof"`
}

type Expr_GreaterThan struct {
	GreaterThan *ExprGreaterThan `protobuf:"bytes,12,opt,name=greater_than,json=greaterThan,proto3,oneof"`
}

type Expr_GreaterThanOrEquals struct {
	GreaterThanOrEquals *ExprGreaterThanOrEquals `protobuf:"bytes,13,opt,name=greater_than_or_equals,json=greaterThanOrEquals,proto3,oneof"`
}

type Expr_And struct {
	And *ExprAnd `protobuf:"bytes,14,opt,name=and,proto3,oneof"`
}

type Expr_Or struct {
	Or *ExprOr `protobuf:"bytes,15,opt,name=or,proto3,oneof"`
}

type Expr_Plus struct {
	Plus *ExprPlus `protobuf:"bytes,16,opt,name=plus,proto3,oneof"`
}

type Expr_Minus struct {
	Minus *ExprMinus `protobuf:"bytes,17,opt,name=minus,proto3,oneof"`
}

type Expr_Times struct {
	Times *ExprTimes `protobuf:"bytes,18,opt,name=times,proto3,oneof"`
}

type Expr_Contains struct {
	Contains *ExprContains `protobuf:"bytes,19,opt,name=contains,proto3,oneof"`
}

type Expr_ContainsAll struct {
	ContainsAll *ExprContainsAll `protobuf:"bytes,20,opt,name=contains_all,json=containsAll,proto3,oneof"`
}

type Expr_ContainsAny struct {
	ContainsAny *ExprContainsAny `protobuf:"bytes,21,opt,name=contains_any,json=containsAny,proto3,oneof"`
}

type Expr_GetAttribute struct {
	GetAttribute *ExprGetAttribute `protobuf:"bytes,22,opt,name=get_attribute,json=getAttribute,proto3,oneof"`
}

type Expr_HasAttribute struct {
	HasAttribute *ExprHasAttribute `protobuf:"bytes,23,opt,name=has_attribute,json=hasAttribute,proto3,oneof"`
}

type Expr_Like struct {
	Like *ExprLike `protobuf:"bytes,24,opt,name=like,proto3,oneof"`
}

type Expr_Is struct {
	Is *ExprIs `protobuf:"bytes,25,opt,name=is,proto3,oneof"`
}

type Expr_IfThenElse struct {
	IfThenElse *ExprIfThenElse `protobuf:"bytes,26,opt,name=if_then_else,json=ifThenElse,proto3,oneof"`
}

type Expr_Set struct {
	Set *ExprSet `protobuf:"bytes,27,opt,name=set,proto3,oneof"`
}

type Expr_Record struct {
	Record *ExprRecord `protobuf:"bytes,28,opt,name=record,proto3,oneof"`
}

type Expr_FuncCall struct {
	FuncCall *ExprFuncCall `protobuf:"bytes,29,opt,name=func_call,json=funcCall,proto3,oneof"`
}

func (*Expr_Value) isExpr_Expr() {}

func (*Expr_Var) isExpr_Expr() {}

func (*Expr_Slot) isExpr_Expr() {}

func (*Expr_Unknown) isExpr_Expr() {}

func (*Expr_Not) isExpr_Expr() {}

func (*Expr_Neg) isExpr_Expr() {}

func (*Expr_Equals) isExpr_Expr() {}

func (*Expr_NotEquals) isExpr_Expr() {}

func (*Expr_In) isExpr_Expr() {}

func (*Expr_LessThan) isExpr_Expr() {}

func (*Expr_LessThanOrEquals) isExpr_Expr() {}

func (*Expr_GreaterThan) isExpr_Expr() {}

func (*Expr_GreaterThanOrEquals) isExpr_Expr() {}

func (*Expr_And) isExpr_Expr() {}

func (*Expr_Or) isExpr_Expr() {}

func (*Expr_Plus) isExpr_Expr() {}

func (*Expr_Minus) isExpr_Expr() {}

func (*Expr_Times) isExpr_Expr() {}

func (*Expr_Contains) isExpr_Expr() {}

func (*Expr_ContainsAll) isExpr_Expr() {}

func (*Expr_ContainsAny) isExpr_Expr() {}

func (*Expr_GetAttribute) isExpr_Expr() {}

func (*Expr_HasAttribute) isExpr_Expr() {}

func (*Expr_Like) isExpr_Expr() {}

func (*Expr_Is) isExpr_Expr() {}

func (*Expr_IfThenElse) isExpr_Expr() {}

func (*Expr_Set) isExpr_Expr() {}

func (*Expr_Record) isExpr_Expr() {}

func (*Expr_FuncCall) isExpr_Expr() {}

type ExprValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *Value `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ExprValue) Reset() {
	*x = ExprValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cedar_v3_expr_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExprValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExprValue) ProtoMessage() {}

func (x *ExprValue) ProtoReflect() protoreflect.Message {
	mi := &file_cedar_v3_expr_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExprValue.ProtoReflect.Descriptor instead.
func (*ExprValue) Descriptor() ([]byte, []int) {
	return file_cedar_v3_expr_proto_rawDescGZIP(), []int{1}
}

func (x *ExprValue) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type ExprVar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Variable Variable `protobuf:"varint,1,opt,name=variable,proto3,enum=cedar.v3.Variable" json:"variable,omitempty"`
}

func (x *ExprVar) Reset() {
	*x = ExprVar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cedar_v3_expr_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExprVar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExprVar) ProtoMessage() {}

func (x *ExprVar) ProtoReflect() protoreflect.Message {
	mi := &file_cedar_v3_expr_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExprVar.ProtoReflect.Descriptor instead.
func (*ExprVar) Descriptor() ([]byte, []int) {
	return file_cedar_v3_expr_proto_rawDescGZIP(), []int{2}
}

func (x *ExprVar) GetVariable() Variable {
	if x != nil {
		return x.Variable
	}
	return Variable_VARIABLE_UNSPECIFIED
}

type ExprSlot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotId SlotId `protobuf:"varint,1,opt,name=slot_id,json=slotId,proto3,enum=cedar.v3.SlotId" json:"slot_id,omitempty"`
}

func (x *ExprSlot) Reset() {
	*x = ExprSlot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cedar_v3_expr_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExprSlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExprSlot) ProtoMessage() {}

func (x *ExprSlot) ProtoReflect() protoreflect.Message {
	mi := &file_cedar_v3_expr_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExprSlot.ProtoReflect.Descriptor instead.
func (*ExprSlot) Descriptor() ([]byte, []int) {
	return file_cedar_v3_expr_proto_rawDescGZIP(), []int{3}
}

func (x *ExprSlot) GetSlotId() SlotId {
	if x != nil {
		return x.SlotId
	}
	return SlotId_SLOT_ID_UNSPECIFIED
}

type ExprUnknown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ExprUnknown) Reset() {
	*x = ExprUnknown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cedar_v3_expr_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExprUnknown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExprUnknown) ProtoMessage() {}

func (x *ExprUnknown) ProtoReflect() protoreflect.Message {
	mi := &file_cedar_v3_expr_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExprUnknown.ProtoReflect.Descriptor instead.
func (*ExprUnknown) Descriptor() ([]byte, []int) {
	return file_cedar_v3_expr_proto_rawDescGZIP(), []int{4}
}

func (x *ExprUnknown) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ExprNot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr *Expr `protobuf:"bytes,1,opt,name=expr,proto3" json:"expr,omitempty"`
}

func (x *ExprNot) Reset() {
	*x = ExprNot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cedar_v3_expr_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExprNot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExprNot) ProtoMessage() {}

func (x *ExprNot) ProtoReflect() protoreflect.Message {
	mi := &file_cedar_v3_expr_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExprNot.ProtoReflect.Descriptor instead.
func (*ExprNot) Descriptor() ([]byte, []int) {
	return file_cedar_v3_expr_proto_rawDescGZIP(), []int{5}
}

func (x *ExprNot) GetExpr() *Expr {
	if x != nil {
		return x.Expr
	}
	return nil
}

type ExprNeg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr *Expr `protobuf:"bytes,1,opt,name=expr,proto3" json:"expr,omitempty"`
}

func (x *ExprNeg) Reset() {
	*x = ExprNeg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cedar_v3_expr_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExprNeg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExprNeg) ProtoMessage() {}

func (x *ExprNeg) ProtoReflect() protoreflect.Message {
	mi := &file_cedar_v3_expr_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExprNeg.ProtoReflect.Descriptor instead.
func (*ExprNeg) Descriptor() ([]byte, []int) {
	return file_cedar_v3_expr_proto_rawDescGZIP(), []int{6}
}

func (x *ExprNeg) GetExpr() *Expr {
	if x != nil {
		return x.Expr
	}
	return nil
}

type ExprEquals struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Left  *Expr `protobuf:"bytes,1,opt,name=left,proto3" json:"left,omitempty"`
	Right *Expr `protobuf:"bytes,2,opt,name=right,proto3" json:"right,omitempty"`
}

func (x *ExprEquals) Reset() {
	*x = ExprEquals{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cedar_v3_expr_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExprEquals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExprEquals) ProtoMessage() {}

func (x *ExprEquals) ProtoReflect() protoreflect.Message {
	mi := &file_cedar_v3_expr_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExprEquals.ProtoReflect.Descriptor instead.
func (*ExprEquals) Descriptor() ([]byte, []int) {
	return file_cedar_v3_expr_proto_rawDescGZIP(), []int{7}
}

func (x *ExprEquals) GetLeft() *Expr {
	if x != nil {
		return x.Left
	}
	return nil
}

func (x *ExprEquals) GetRight() *Expr {
	if x != nil {
		return x.Right
	}
	return nil
}

type ExprNotEquals struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Left  *Expr `protobuf:"bytes,1,opt,name=left,proto3" json:"left,omitempty"`
	Right *Expr `protobuf:"bytes,2,opt,name=right,proto3" json:"right,omitempty"`
}

func (x *ExprNotEquals) Reset() {
	*x = ExprNotEquals{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cedar_v3_expr_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExprNotEquals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExprNotEquals) ProtoMessage() {}

func (x *ExprNotEquals) ProtoReflect() protoreflect.Message {
	mi := &file_cedar_v3_expr_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExprNotEquals.ProtoReflect.Descriptor instead.
func (*ExprNotEquals) Descriptor() ([]byte, []int) {
	return file_cedar_v3_expr_proto_rawDescGZIP(), []int{8}
}

func (x *ExprNotEquals) GetLeft() *Expr {
	if x != nil {
		return x.Left
	}
	return nil
}

func (x *ExprNotEquals) GetRight() *Expr {
	if x != nil {
		return x.Right
	}
	return nil
}

type ExprIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Left  *Expr `protobuf:"bytes,1,opt,name=left,proto3" json:"left,omitempty"`
	Right *Expr `protobuf:"bytes,2,opt,name=right,proto3" json:"right,omitempty"`
}

func (x *ExprIn) Reset() {
	*x = ExprIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cedar_v3_expr_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExprIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExprIn) ProtoMessage() {}

func (x *ExprIn) ProtoReflect() protoreflect.Message {
	mi := &file_cedar_v3_expr_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExprIn.ProtoReflect.Descriptor instead.
func (*ExprIn) Descriptor() ([]byte, []int) {
	return file_cedar_v3_expr_proto_rawDescGZIP(), []int{9}
}

func (x *ExprIn) GetLeft() *Expr {
	if x != nil {
		return x.Left
	}
	return nil
}

func (x *ExprIn) GetRight() *Expr {
	if x != nil {
		return x.Right
	}
	return nil
}

type ExprLessThan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Left  *Expr `protobuf:"bytes,1,opt,name=left,proto3" json:"left,omitempty"`
	Right *Expr `protobuf:"bytes,2,opt,name=right,proto3" json:"right,omitempty"`
}

func (x *ExprLessThan) Reset() {
	*x = ExprLessThan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cedar_v3_expr_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExprLessThan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExprLessThan) ProtoMessage() {}

func (x *ExprLessThan) ProtoReflect() protoreflect.Message {
	mi := &file_cedar_v3_expr_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExprLessThan.ProtoReflect.Descriptor instead.
func (*ExprLessThan) Descriptor() ([]byte, []int) {
	return file_cedar_v3_expr_proto_rawDescGZIP(), []int{10}
}

func (x *ExprLessThan) GetLeft() *Expr {
	if x != nil {
		return x.Left
	}
	return nil
}

func (x *ExprLessThan) GetRight() *Expr {
	if x != nil {
		return x.Right
	}
	return nil
}

type ExprLessThanOrEquals struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Left  *Expr `protobuf:"bytes,1,opt,name=left,proto3" json:"left,omitempty"`
	Right *Expr `protobuf:"bytes,2,opt,name=right,proto3" json:"right,omitempty"`
}

func (x *ExprLessThanOrEquals) Reset() {
	*x = ExprLessThanOrEquals{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cedar_v3_expr_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExprLessThanOrEquals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExprLessThanOrEquals) ProtoMessage() {}

func (x *ExprLessThanOrEquals) ProtoReflect() protoreflect.Message {
	mi := &file_cedar_v3_expr_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExprLessThanOrEquals.ProtoReflect.Descriptor instead.
func (*ExprLessThanOrEquals) Descriptor() ([]byte, []int) {
	return file_cedar_v3_expr_proto_rawDescGZIP(), []int{11}
}

func (x *ExprLessThanOrEquals) GetLeft() *Expr {
	if x != nil {
		return x.Left
	}
	return nil
}

func (x *ExprLessThanOrEquals) GetRight() *Expr {
	if x != nil {
		return x.Right
	}
	return nil
}

type ExprGreaterThan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Left  *Expr `protobuf:"bytes,1,opt,name=left,proto3" json:"left,omitempty"`
	Right *Expr `protobuf:"bytes,2,opt,name=right,proto3" json:"right,omitempty"`
}

func (x *ExprGreaterThan) Reset() {
	*x = ExprGreaterThan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cedar_v3_expr_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExprGreaterThan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExprGreaterThan) ProtoMessage() {}

func (x *ExprGreaterThan) ProtoReflect() protoreflect.Message {
	mi := &file_cedar_v3_expr_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExprGreaterThan.ProtoReflect.Descriptor instead.
func (*ExprGreaterThan) Descriptor() ([]byte, []int) {
	return file_cedar_v3_expr_proto_rawDescGZIP(), []int{12}
}

func (x *ExprGreaterThan) GetLeft() *Expr {
	if x != nil {
		return x.Left
	}
	return nil
}

func (x *ExprGreaterThan) GetRight() *Expr {
	if x != nil {
		return x.Right
	}
	return nil
}

type ExprGreaterThanOrEquals struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Left  *Expr `protobuf:"bytes,1,opt,name=left,proto3" json:"left,omitempty"`
	Right *Expr `protobuf:"bytes,2,opt,name=right,proto3" json:"right,omitempty"`
}

func (x *ExprGreaterThanOrEquals) Reset() {
	*x = ExprGreaterThanOrEquals{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cedar_v3_expr_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExprGreaterThanOrEquals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExprGreaterThanOrEquals) ProtoMessage() {}

func (x *ExprGreaterThanOrEquals) ProtoReflect() protoreflect.Message {
	mi := &file_cedar_v3_expr_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExprGreaterThanOrEquals.ProtoReflect.Descriptor instead.
func (*ExprGreaterThanOrEquals) Descriptor() ([]byte, []int) {
	return file_cedar_v3_expr_proto_rawDescGZIP(), []int{13}
}

func (x *ExprGreaterThanOrEquals) GetLeft() *Expr {
	if x != nil {
		return x.Left
	}
	return nil
}

func (x *ExprGreaterThanOrEquals) GetRight() *Expr {
	if x != nil {
		return x.Right
	}
	return nil
}

type ExprAnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Left  *Expr `protobuf:"bytes,1,opt,name=left,proto3" json:"left,omitempty"`
	Right *Expr `protobuf:"bytes,2,opt,name=right,proto3" json:"right,omitempty"`
}

func (x *ExprAnd) Reset() {
	*x = ExprAnd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cedar_v3_expr_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExprAnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExprAnd) ProtoMessage() {}

func (x *ExprAnd) ProtoReflect() protoreflect.Message {
	mi := &file_cedar_v3_expr_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExprAnd.ProtoReflect.Descriptor instead.
func (*ExprAnd) Descriptor() ([]byte, []int) {
	return file_cedar_v3_expr_proto_rawDescGZIP(), []int{14}
}

func (x *ExprAnd) GetLeft() *Expr {
	if x != nil {
		return x.Left
	}
	return nil
}

func (x *ExprAnd) GetRight() *Expr {
	if x != nil {
		return x.Right
	}
	return nil
}

type ExprOr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Left  *Expr `protobuf:"bytes,1,opt,name=left,proto3" json:"left,omitempty"`
	Right *Expr `protobuf:"bytes,2,opt,name=right,proto3" json:"right,omitempty"`
}

func (x *ExprOr) Reset() {
	*x = ExprOr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cedar_v3_expr_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExprOr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExprOr) ProtoMessage() {}

func (x *ExprOr) ProtoReflect() protoreflect.Message {
	mi := &file_cedar_v3_expr_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExprOr.ProtoReflect.Descriptor instead.
func (*ExprOr) Descriptor() ([]byte, []int) {
	return file_cedar_v3_expr_proto_rawDescGZIP(), []int{15}
}

func (x *ExprOr) GetLeft() *Expr {
	if x != nil {
		return x.Left
	}
	return nil
}

func (x *ExprOr) GetRight() *Expr {
	if x != nil {
		return x.Right
	}
	return nil
}

type ExprPlus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Left  *Expr `protobuf:"bytes,1,opt,name=left,proto3" json:"left,omitempty"`
	Right *Expr `protobuf:"bytes,2,opt,name=right,proto3" json:"right,omitempty"`
}

func (x *ExprPlus) Reset() {
	*x = ExprPlus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cedar_v3_expr_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExprPlus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExprPlus) ProtoMessage() {}

func (x *ExprPlus) ProtoReflect() protoreflect.Message {
	mi := &file_cedar_v3_expr_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExprPlus.ProtoReflect.Descriptor instead.
func (*ExprPlus) Descriptor() ([]byte, []int) {
	return file_cedar_v3_expr_proto_rawDescGZIP(), []int{16}
}

func (x *ExprPlus) GetLeft() *Expr {
	if x != nil {
		return x.Left
	}
	return nil
}

func (x *ExprPlus) GetRight() *Expr {
	if x != nil {
		return x.Right
	}
	return nil
}

type ExprMinus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Left  *Expr `protobuf:"bytes,1,opt,name=left,proto3" json:"left,omitempty"`
	Right *Expr `protobuf:"bytes,2,opt,name=right,proto3" json:"right,omitempty"`
}

func (x *ExprMinus) Reset() {
	*x = ExprMinus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cedar_v3_expr_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExprMinus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExprMinus) ProtoMessage() {}

func (x *ExprMinus) ProtoReflect() protoreflect.Message {
	mi := &file_cedar_v3_expr_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExprMinus.ProtoReflect.Descriptor instead.
func (*ExprMinus) Descriptor() ([]byte, []int) {
	return file_cedar_v3_expr_proto_rawDescGZIP(), []int{17}
}

func (x *ExprMinus) GetLeft() *Expr {
	if x != nil {
		return x.Left
	}
	return nil
}

func (x *ExprMinus) GetRight() *Expr {
	if x != nil {
		return x.Right
	}
	return nil
}

type ExprTimes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Left  *Expr `protobuf:"bytes,1,opt,name=left,proto3" json:"left,omitempty"`
	Right *Expr `protobuf:"bytes,2,opt,name=right,proto3" json:"right,omitempty"`
}

func (x *ExprTimes) Reset() {
	*x = ExprTimes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cedar_v3_expr_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExprTimes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExprTimes) ProtoMessage() {}

func (x *ExprTimes) ProtoReflect() protoreflect.Message {
	mi := &file_cedar_v3_expr_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExprTimes.ProtoReflect.Descriptor instead.
func (*ExprTimes) Descriptor() ([]byte, []int) {
	return file_cedar_v3_expr_proto_rawDescGZIP(), []int{18}
}

func (x *ExprTimes) GetLeft() *Expr {
	if x != nil {
		return x.Left
	}
	return nil
}

func (x *ExprTimes) GetRight() *Expr {
	if x != nil {
		return x.Right
	}
	return nil
}

type ExprContains struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Left  *Expr `protobuf:"bytes,1,opt,name=left,proto3" json:"left,omitempty"`
	Right *Expr `protobuf:"bytes,2,opt,name=right,proto3" json:"right,omitempty"`
}

func (x *ExprContains) Reset() {
	*x = ExprContains{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cedar_v3_expr_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExprContains) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExprContains) ProtoMessage() {}

func (x *ExprContains) ProtoReflect() protoreflect.Message {
	mi := &file_cedar_v3_expr_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExprContains.ProtoReflect.Descriptor instead.
func (*ExprContains) Descriptor() ([]byte, []int) {
	return file_cedar_v3_expr_proto_rawDescGZIP(), []int{19}
}

func (x *ExprContains) GetLeft() *Expr {
	if x != nil {
		return x.Left
	}
	return nil
}

func (x *ExprContains) GetRight() *Expr {
	if x != nil {
		return x.Right
	}
	return nil
}

type ExprContainsAll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Left  *Expr `protobuf:"bytes,1,opt,name=left,proto3" json:"left,omitempty"`
	Right *Expr `protobuf:"bytes,2,opt,name=right,proto3" json:"right,omitempty"`
}

func (x *ExprContainsAll) Reset() {
	*x = ExprContainsAll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cedar_v3_expr_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExprContainsAll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExprContainsAll) ProtoMessage() {}

func (x *ExprContainsAll) ProtoReflect() protoreflect.Message {
	mi := &file_cedar_v3_expr_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExprContainsAll.ProtoReflect.Descriptor instead.
func (*ExprContainsAll) Descriptor() ([]byte, []int) {
	return file_cedar_v3_expr_proto_rawDescGZIP(), []int{20}
}

func (x *ExprContainsAll) GetLeft() *Expr {
	if x != nil {
		return x.Left
	}
	return nil
}

func (x *ExprContainsAll) GetRight() *Expr {
	if x != nil {
		return x.Right
	}
	return nil
}

type ExprContainsAny struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Left  *Expr `protobuf:"bytes,1,opt,name=left,proto3" json:"left,omitempty"`
	Right *Expr `protobuf:"bytes,2,opt,name=right,proto3" json:"right,omitempty"`
}

func (x *ExprContainsAny) Reset() {
	*x = ExprContainsAny{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cedar_v3_expr_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExprContainsAny) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExprContainsAny) ProtoMessage() {}

func (x *ExprContainsAny) ProtoReflect() protoreflect.Message {
	mi := &file_cedar_v3_expr_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExprContainsAny.ProtoReflect.Descriptor instead.
func (*ExprContainsAny) Descriptor() ([]byte, []int) {
	return file_cedar_v3_expr_proto_rawDescGZIP(), []int{21}
}

func (x *ExprContainsAny) GetLeft() *Expr {
	if x != nil {
		return x.Left
	}
	return nil
}

func (x *ExprContainsAny) GetRight() *Expr {
	if x != nil {
		return x.Right
	}
	return nil
}

type ExprGetAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Left *Expr  `protobuf:"bytes,1,opt,name=left,proto3" json:"left,omitempty"`
	Attr string `protobuf:"bytes,2,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *ExprGetAttribute) Reset() {
	*x = ExprGetAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cedar_v3_expr_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExprGetAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExprGetAttribute) ProtoMessage() {}

func (x *ExprGetAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_cedar_v3_expr_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExprGetAttribute.ProtoReflect.Descriptor instead.
func (*ExprGetAttribute) Descriptor() ([]byte, []int) {
	return file_cedar_v3_expr_proto_rawDescGZIP(), []int{22}
}

func (x *ExprGetAttribute) GetLeft() *Expr {
	if x != nil {
		return x.Left
	}
	return nil
}

func (x *ExprGetAttribute) GetAttr() string {
	if x != nil {
		return x.Attr
	}
	return ""
}

type ExprHasAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Left *Expr  `protobuf:"bytes,1,opt,name=left,proto3" json:"left,omitempty"`
	Attr string `protobuf:"bytes,2,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *ExprHasAttribute) Reset() {
	*x = ExprHasAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cedar_v3_expr_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExprHasAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExprHasAttribute) ProtoMessage() {}

func (x *ExprHasAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_cedar_v3_expr_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExprHasAttribute.ProtoReflect.Descriptor instead.
func (*ExprHasAttribute) Descriptor() ([]byte, []int) {
	return file_cedar_v3_expr_proto_rawDescGZIP(), []int{23}
}

func (x *ExprHasAttribute) GetLeft() *Expr {
	if x != nil {
		return x.Left
	}
	return nil
}

func (x *ExprHasAttribute) GetAttr() string {
	if x != nil {
		return x.Attr
	}
	return ""
}

type ExprLike struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Left    *Expr  `protobuf:"bytes,1,opt,name=left,proto3" json:"left,omitempty"`
	Pattern string `protobuf:"bytes,2,opt,name=pattern,proto3" json:"pattern,omitempty"`
}

func (x *ExprLike) Reset() {
	*x = ExprLike{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cedar_v3_expr_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExprLike) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExprLike) ProtoMessage() {}

func (x *ExprLike) ProtoReflect() protoreflect.Message {
	mi := &file_cedar_v3_expr_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExprLike.ProtoReflect.Descriptor instead.
func (*ExprLike) Descriptor() ([]byte, []int) {
	return file_cedar_v3_expr_proto_rawDescGZIP(), []int{24}
}

func (x *ExprLike) GetLeft() *Expr {
	if x != nil {
		return x.Left
	}
	return nil
}

func (x *ExprLike) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

type ExprIs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Left       *Expr  `protobuf:"bytes,1,opt,name=left,proto3" json:"left,omitempty"`
	EntityType string `protobuf:"bytes,2,opt,name=entity_type,json=entityType,proto3" json:"entity_type,omitempty"`
	In         *Expr  `protobuf:"bytes,3,opt,name=in,proto3,oneof" json:"in,omitempty"`
}

func (x *ExprIs) Reset() {
	*x = ExprIs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cedar_v3_expr_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExprIs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExprIs) ProtoMessage() {}

func (x *ExprIs) ProtoReflect() protoreflect.Message {
	mi := &file_cedar_v3_expr_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExprIs.ProtoReflect.Descriptor instead.
func (*ExprIs) Descriptor() ([]byte, []int) {
	return file_cedar_v3_expr_proto_rawDescGZIP(), []int{25}
}

func (x *ExprIs) GetLeft() *Expr {
	if x != nil {
		return x.Left
	}
	return nil
}

func (x *ExprIs) GetEntityType() string {
	if x != nil {
		return x.EntityType
	}
	return ""
}

func (x *ExprIs) GetIn() *Expr {
	if x != nil {
		return x.In
	}
	return nil
}

type ExprIfThenElse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	If   *Expr `protobuf:"bytes,1,opt,name=if,proto3" json:"if,omitempty"`
	Then *Expr `protobuf:"bytes,2,opt,name=then,proto3" json:"then,omitempty"`
	Else *Expr `protobuf:"bytes,3,opt,name=else,proto3" json:"else,omitempty"`
}

func (x *ExprIfThenElse) Reset() {
	*x = ExprIfThenElse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cedar_v3_expr_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExprIfThenElse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExprIfThenElse) ProtoMessage() {}

func (x *ExprIfThenElse) ProtoReflect() protoreflect.Message {
	mi := &file_cedar_v3_expr_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExprIfThenElse.ProtoReflect.Descriptor instead.
func (*ExprIfThenElse) Descriptor() ([]byte, []int) {
	return file_cedar_v3_expr_proto_rawDescGZIP(), []int{26}
}

func (x *ExprIfThenElse) GetIf() *Expr {
	if x != nil {
		return x.If
	}
	return nil
}

func (x *ExprIfThenElse) GetThen() *Expr {
	if x != nil {
		return x.Then
	}
	return nil
}

func (x *ExprIfThenElse) GetElse() *Expr {
	if x != nil {
		return x.Else
	}
	return nil
}

type ExprSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expressions []*Expr `protobuf:"bytes,1,rep,name=expressions,proto3" json:"expressions,omitempty"`
}

func (x *ExprSet) Reset() {
	*x = ExprSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cedar_v3_expr_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExprSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExprSet) ProtoMessage() {}

func (x *ExprSet) ProtoReflect() protoreflect.Message {
	mi := &file_cedar_v3_expr_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExprSet.ProtoReflect.Descriptor instead.
func (*ExprSet) Descriptor() ([]byte, []int) {
	return file_cedar_v3_expr_proto_rawDescGZIP(), []int{27}
}

func (x *ExprSet) GetExpressions() []*Expr {
	if x != nil {
		return x.Expressions
	}
	return nil
}

type ExprRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attributes map[string]*Expr `protobuf:"bytes,1,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ExprRecord) Reset() {
	*x = ExprRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cedar_v3_expr_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExprRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExprRecord) ProtoMessage() {}

func (x *ExprRecord) ProtoReflect() protoreflect.Message {
	mi := &file_cedar_v3_expr_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExprRecord.ProtoReflect.Descriptor instead.
func (*ExprRecord) Descriptor() ([]byte, []int) {
	return file_cedar_v3_expr_proto_rawDescGZIP(), []int{28}
}

func (x *ExprRecord) GetAttributes() map[string]*Expr {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type ExprFuncCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fn   string  `protobuf:"bytes,1,opt,name=fn,proto3" json:"fn,omitempty"`
	Args []*Expr `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *ExprFuncCall) Reset() {
	*x = ExprFuncCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cedar_v3_expr_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExprFuncCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExprFuncCall) ProtoMessage() {}

func (x *ExprFuncCall) ProtoReflect() protoreflect.Message {
	mi := &file_cedar_v3_expr_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExprFuncCall.ProtoReflect.Descriptor instead.
func (*ExprFuncCall) Descriptor() ([]byte, []int) {
	return file_cedar_v3_expr_proto_rawDescGZIP(), []int{29}
}

func (x *ExprFuncCall) GetFn() string {
	if x != nil {
		return x.Fn
	}
	return ""
}

func (x *ExprFuncCall) GetArgs() []*Expr {
	if x != nil {
		return x.Args
	}
	return nil
}

var File_cedar_v3_expr_proto protoreflect.FileDescriptor

var file_cedar_v3_expr_proto_rawDesc = []byte{
	0x0a, 0x13, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2f, 0x76, 0x33, 0x2f, 0x65, 0x78, 0x70, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x33, 0x1a,
	0x14, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2f, 0x76, 0x33, 0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x64, 0x61, 0x72, 0x74, 0x2f, 0x64, 0x61, 0x72, 0x74,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x81,
	0x0c, 0x0a, 0x04, 0x45, 0x78, 0x70, 0x72, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76,
	0x33, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a, 0x03, 0x76, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x56, 0x61, 0x72, 0x42, 0x09, 0xba, 0x8f, 0xbe, 0x6d, 0x04, 0x76, 0x61, 0x72, 0x5f, 0x48,
	0x00, 0x52, 0x03, 0x76, 0x61, 0x72, 0x12, 0x28, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x33, 0x2e,
	0x45, 0x78, 0x70, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x48, 0x00, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74,
	0x12, 0x31, 0x0a, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x12, 0x25, 0x0a, 0x03, 0x6e, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x4e, 0x6f, 0x74, 0x48, 0x00, 0x52, 0x03, 0x6e, 0x6f, 0x74, 0x12, 0x25, 0x0a, 0x03, 0x6e, 0x65,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e,
	0x76, 0x33, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x4e, 0x65, 0x67, 0x48, 0x00, 0x52, 0x03, 0x6e, 0x65,
	0x67, 0x12, 0x2e, 0x0a, 0x06, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x06, 0x65, 0x71, 0x75, 0x61, 0x6c,
	0x73, 0x12, 0x38, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x5f, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x33,
	0x2e, 0x45, 0x78, 0x70, 0x72, 0x4e, 0x6f, 0x74, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x48, 0x00,
	0x52, 0x09, 0x6e, 0x6f, 0x74, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x12, 0x2c, 0x0a, 0x02, 0x69,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e,
	0x76, 0x33, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x49, 0x6e, 0x42, 0x08, 0xba, 0x8f, 0xbe, 0x6d, 0x03,
	0x69, 0x6e, 0x5f, 0x48, 0x00, 0x52, 0x02, 0x69, 0x6e, 0x12, 0x35, 0x0a, 0x09, 0x6c, 0x65, 0x73,
	0x73, 0x5f, 0x74, 0x68, 0x61, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63,
	0x65, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x4c, 0x65, 0x73, 0x73,
	0x54, 0x68, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6e,
	0x12, 0x4f, 0x0a, 0x13, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x68, 0x61, 0x6e, 0x5f, 0x6f, 0x72,
	0x5f, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x4c, 0x65, 0x73,
	0x73, 0x54, 0x68, 0x61, 0x6e, 0x4f, 0x72, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x48, 0x00, 0x52,
	0x10, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6e, 0x4f, 0x72, 0x45, 0x71, 0x75, 0x61, 0x6c,
	0x73, 0x12, 0x3e, 0x0a, 0x0c, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x61,
	0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e,
	0x76, 0x33, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x47, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68,
	0x61, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x61,
	0x6e, 0x12, 0x58, 0x0a, 0x16, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x61,
	0x6e, 0x5f, 0x6f, 0x72, 0x5f, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x47, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x4f, 0x72, 0x45, 0x71,
	0x75, 0x61, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x13, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54,
	0x68, 0x61, 0x6e, 0x4f, 0x72, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x12, 0x25, 0x0a, 0x03, 0x61,
	0x6e, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72,
	0x2e, 0x76, 0x33, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x41, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x03, 0x61,
	0x6e, 0x64, 0x12, 0x22, 0x0a, 0x02, 0x6f, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x4f, 0x72,
	0x48, 0x00, 0x52, 0x02, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x6c, 0x75, 0x73, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x33, 0x2e,
	0x45, 0x78, 0x70, 0x72, 0x50, 0x6c, 0x75, 0x73, 0x48, 0x00, 0x52, 0x04, 0x70, 0x6c, 0x75, 0x73,
	0x12, 0x2b, 0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x4d,
	0x69, 0x6e, 0x75, 0x73, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x75, 0x73, 0x12, 0x2b, 0x0a,
	0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63,
	0x65, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x48, 0x00, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63,
	0x65, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73,
	0x12, 0x3e, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x5f, 0x61, 0x6c, 0x6c,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76,
	0x33, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x41, 0x6c,
	0x6c, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x41, 0x6c, 0x6c,
	0x12, 0x3e, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x5f, 0x61, 0x6e, 0x79,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76,
	0x33, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x41, 0x6e,
	0x79, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x41, 0x6e, 0x79,
	0x12, 0x41, 0x0a, 0x0d, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e,
	0x76, 0x33, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x67, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x68, 0x61, 0x73, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x65, 0x64,
	0x61, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x48, 0x61, 0x73, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x68, 0x61, 0x73, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x6c, 0x69, 0x6b, 0x65, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x33, 0x2e,
	0x45, 0x78, 0x70, 0x72, 0x4c, 0x69, 0x6b, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x69, 0x6b, 0x65,
	0x12, 0x2c, 0x0a, 0x02, 0x69, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63,
	0x65, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x49, 0x73, 0x42, 0x08,
	0xba, 0x8f, 0xbe, 0x6d, 0x03, 0x69, 0x73, 0x5f, 0x48, 0x00, 0x52, 0x02, 0x69, 0x73, 0x12, 0x3c,
	0x0a, 0x0c, 0x69, 0x66, 0x5f, 0x74, 0x68, 0x65, 0x6e, 0x5f, 0x65, 0x6c, 0x73, 0x65, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x33, 0x2e,
	0x45, 0x78, 0x70, 0x72, 0x49, 0x66, 0x54, 0x68, 0x65, 0x6e, 0x45, 0x6c, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x0a, 0x69, 0x66, 0x54, 0x68, 0x65, 0x6e, 0x45, 0x6c, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x03,
	0x73, 0x65, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x65, 0x64, 0x61,
	0x72, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x03,
	0x73, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x35, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76,
	0x33, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00,
	0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x65, 0x78,
	0x70, 0x72, 0x22, 0x32, 0x0a, 0x09, 0x45, 0x78, 0x70, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x39, 0x0a, 0x07, 0x45, 0x78, 0x70, 0x72, 0x56, 0x61,
	0x72, 0x12, 0x2e, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x22, 0x35, 0x0a, 0x08, 0x45, 0x78, 0x70, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x29, 0x0a,
	0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x49, 0x64,
	0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x22, 0x21, 0x0a, 0x0b, 0x45, 0x78, 0x70, 0x72,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2d, 0x0a, 0x07, 0x45,
	0x78, 0x70, 0x72, 0x4e, 0x6f, 0x74, 0x12, 0x22, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x33, 0x2e,
	0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x22, 0x2d, 0x0a, 0x07, 0x45, 0x78,
	0x70, 0x72, 0x4e, 0x65, 0x67, 0x12, 0x22, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x22, 0x56, 0x0a, 0x0a, 0x45, 0x78, 0x70,
	0x72, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x33,
	0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x65, 0x64,
	0x61, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x05, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x22, 0x59, 0x0a, 0x0d, 0x45, 0x78, 0x70, 0x72, 0x4e, 0x6f, 0x74, 0x45, 0x71, 0x75, 0x61,
	0x6c, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x33,
	0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x22, 0x52, 0x0a, 0x06,
	0x45, 0x78, 0x70, 0x72, 0x49, 0x6e, 0x12, 0x22, 0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x33, 0x2e,
	0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x65, 0x64, 0x61,
	0x72, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x22, 0x58, 0x0a, 0x0c, 0x45, 0x78, 0x70, 0x72, 0x4c, 0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6e,
	0x12, 0x22, 0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04,
	0x6c, 0x65, 0x66, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x52, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x22, 0x60, 0x0a, 0x14, 0x45, 0x78,
	0x70, 0x72, 0x4c, 0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6e, 0x4f, 0x72, 0x45, 0x71, 0x75, 0x61,
	0x6c, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x33,
	0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x22, 0x5b, 0x0a, 0x0f,
	0x45, 0x78, 0x70, 0x72, 0x47, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x12,
	0x22, 0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x6c,
	0x65, 0x66, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x52, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x22, 0x63, 0x0a, 0x17, 0x45, 0x78, 0x70,
	0x72, 0x47, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x4f, 0x72, 0x45, 0x71,
	0x75, 0x61, 0x6c, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e,
	0x76, 0x33, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x22, 0x53,
	0x0a, 0x07, 0x45, 0x78, 0x70, 0x72, 0x41, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x04, 0x6c, 0x65, 0x66,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e,
	0x76, 0x33, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x12, 0x24, 0x0a,
	0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63,
	0x65, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x05, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x22, 0x52, 0x0a, 0x06, 0x45, 0x78, 0x70, 0x72, 0x4f, 0x72, 0x12, 0x22, 0x0a,
	0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x65,
	0x64, 0x61, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x6c, 0x65, 0x66,
	0x74, 0x12, 0x24, 0x0a, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x52, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x22, 0x54, 0x0a, 0x08, 0x45, 0x78, 0x70, 0x72, 0x50,
	0x6c, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76,
	0x33, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x22, 0x55, 0x0a,
	0x09, 0x45, 0x78, 0x70, 0x72, 0x4d, 0x69, 0x6e, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x6c, 0x65,
	0x66, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72,
	0x2e, 0x76, 0x33, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x12, 0x24,
	0x0a, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x05, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x22, 0x55, 0x0a, 0x09, 0x45, 0x78, 0x70, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x12, 0x22, 0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52,
	0x04, 0x6c, 0x65, 0x66, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x33, 0x2e,
	0x45, 0x78, 0x70, 0x72, 0x52, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x22, 0x58, 0x0a, 0x0c, 0x45,
	0x78, 0x70, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x6c,
	0x65, 0x66, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x65, 0x64, 0x61,
	0x72, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x12,
	0x24, 0x0a, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x05,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x22, 0x5b, 0x0a, 0x0f, 0x45, 0x78, 0x70, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x73, 0x41, 0x6c, 0x6c, 0x12, 0x22, 0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76,
	0x33, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x12, 0x24, 0x0a, 0x05,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x65,
	0x64, 0x61, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x05, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x22, 0x5b, 0x0a, 0x0f, 0x45, 0x78, 0x70, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x73, 0x41, 0x6e, 0x79, 0x12, 0x22, 0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72,
	0x2e, 0x76, 0x33, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x22,
	0x4a, 0x0a, 0x10, 0x45, 0x78, 0x70, 0x72, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x22, 0x4a, 0x0a, 0x10, 0x45,
	0x78, 0x70, 0x72, 0x48, 0x61, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12,
	0x22, 0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x6c,
	0x65, 0x66, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x22, 0x48, 0x0a, 0x08, 0x45, 0x78, 0x70, 0x72, 0x4c,
	0x69, 0x6b, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x22, 0x83, 0x01, 0x0a, 0x06, 0x45, 0x78, 0x70, 0x72, 0x49, 0x73, 0x12, 0x22, 0x0a, 0x04,
	0x6c, 0x65, 0x66, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x65, 0x64,
	0x61, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2d, 0x0a, 0x02, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x42, 0x08, 0xba,
	0x8f, 0xbe, 0x6d, 0x03, 0x69, 0x6e, 0x5f, 0x48, 0x00, 0x52, 0x02, 0x69, 0x6e, 0x88, 0x01, 0x01,
	0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x6e, 0x22, 0x8e, 0x01, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x72,
	0x49, 0x66, 0x54, 0x68, 0x65, 0x6e, 0x45, 0x6c, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x02, 0x69, 0x66,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76,
	0x33, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x42, 0x08, 0xba, 0x8f, 0xbe, 0x6d, 0x03, 0x69, 0x66, 0x5f,
	0x52, 0x02, 0x69, 0x66, 0x12, 0x22, 0x0a, 0x04, 0x74, 0x68, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x52, 0x04, 0x74, 0x68, 0x65, 0x6e, 0x12, 0x2e, 0x0a, 0x04, 0x65, 0x6c, 0x73, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76,
	0x33, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x42, 0x0a, 0xba, 0x8f, 0xbe, 0x6d, 0x05, 0x65, 0x6c, 0x73,
	0x65, 0x5f, 0x52, 0x04, 0x65, 0x6c, 0x73, 0x65, 0x22, 0x3b, 0x0a, 0x07, 0x45, 0x78, 0x70, 0x72,
	0x53, 0x65, 0x74, 0x12, 0x30, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72,
	0x2e, 0x76, 0x33, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa1, 0x01, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x72, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x12, 0x44, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72,
	0x2e, 0x76, 0x33, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x4d, 0x0a, 0x0f, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x42, 0x0a, 0x0c, 0x45, 0x78, 0x70,
	0x72, 0x46, 0x75, 0x6e, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x66, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x66, 0x6e, 0x12, 0x22, 0x0a, 0x04, 0x61, 0x72, 0x67,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e,
	0x76, 0x33, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x2a, 0x7e, 0x0a,
	0x08, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x56, 0x41, 0x52,
	0x49, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x56, 0x41, 0x52, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x50, 0x52, 0x49, 0x4e, 0x43, 0x49, 0x50, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x56,
	0x41, 0x52, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02,
	0x12, 0x15, 0x0a, 0x11, 0x56, 0x41, 0x52, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x41, 0x52, 0x49, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x58, 0x54, 0x10, 0x04, 0x2a, 0x4e, 0x0a,
	0x06, 0x53, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x4c, 0x4f, 0x54, 0x5f,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x15, 0x0a, 0x11, 0x53, 0x4c, 0x4f, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x49, 0x4e,
	0x43, 0x49, 0x50, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x4c, 0x4f, 0x54, 0x5f,
	0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x02, 0x42, 0x91, 0x01,
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x33, 0x42, 0x09,
	0x45, 0x78, 0x70, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x35, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x65, 0x6c, 0x65, 0x73, 0x74, 0x2d, 0x64,
	0x65, 0x76, 0x2f, 0x63, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2f, 0x76, 0x33, 0x3b, 0x63, 0x65, 0x64, 0x61, 0x72,
	0x76, 0x33, 0xa2, 0x02, 0x03, 0x43, 0x58, 0x58, 0xaa, 0x02, 0x08, 0x43, 0x65, 0x64, 0x61, 0x72,
	0x2e, 0x56, 0x33, 0xca, 0x02, 0x08, 0x43, 0x65, 0x64, 0x61, 0x72, 0x5c, 0x56, 0x33, 0xe2, 0x02,
	0x14, 0x43, 0x65, 0x64, 0x61, 0x72, 0x5c, 0x56, 0x33, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x09, 0x43, 0x65, 0x64, 0x61, 0x72, 0x3a, 0x3a, 0x56,
	0x33, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cedar_v3_expr_proto_rawDescOnce sync.Once
	file_cedar_v3_expr_proto_rawDescData = file_cedar_v3_expr_proto_rawDesc
)

func file_cedar_v3_expr_proto_rawDescGZIP() []byte {
	file_cedar_v3_expr_proto_rawDescOnce.Do(func() {
		file_cedar_v3_expr_proto_rawDescData = protoimpl.X.CompressGZIP(file_cedar_v3_expr_proto_rawDescData)
	})
	return file_cedar_v3_expr_proto_rawDescData
}

var file_cedar_v3_expr_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_cedar_v3_expr_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_cedar_v3_expr_proto_goTypes = []any{
	(Variable)(0),                   // 0: cedar.v3.Variable
	(SlotId)(0),                     // 1: cedar.v3.SlotId
	(*Expr)(nil),                    // 2: cedar.v3.Expr
	(*ExprValue)(nil),               // 3: cedar.v3.ExprValue
	(*ExprVar)(nil),                 // 4: cedar.v3.ExprVar
	(*ExprSlot)(nil),                // 5: cedar.v3.ExprSlot
	(*ExprUnknown)(nil),             // 6: cedar.v3.ExprUnknown
	(*ExprNot)(nil),                 // 7: cedar.v3.ExprNot
	(*ExprNeg)(nil),                 // 8: cedar.v3.ExprNeg
	(*ExprEquals)(nil),              // 9: cedar.v3.ExprEquals
	(*ExprNotEquals)(nil),           // 10: cedar.v3.ExprNotEquals
	(*ExprIn)(nil),                  // 11: cedar.v3.ExprIn
	(*ExprLessThan)(nil),            // 12: cedar.v3.ExprLessThan
	(*ExprLessThanOrEquals)(nil),    // 13: cedar.v3.ExprLessThanOrEquals
	(*ExprGreaterThan)(nil),         // 14: cedar.v3.ExprGreaterThan
	(*ExprGreaterThanOrEquals)(nil), // 15: cedar.v3.ExprGreaterThanOrEquals
	(*ExprAnd)(nil),                 // 16: cedar.v3.ExprAnd
	(*ExprOr)(nil),                  // 17: cedar.v3.ExprOr
	(*ExprPlus)(nil),                // 18: cedar.v3.ExprPlus
	(*ExprMinus)(nil),               // 19: cedar.v3.ExprMinus
	(*ExprTimes)(nil),               // 20: cedar.v3.ExprTimes
	(*ExprContains)(nil),            // 21: cedar.v3.ExprContains
	(*ExprContainsAll)(nil),         // 22: cedar.v3.ExprContainsAll
	(*ExprContainsAny)(nil),         // 23: cedar.v3.ExprContainsAny
	(*ExprGetAttribute)(nil),        // 24: cedar.v3.ExprGetAttribute
	(*ExprHasAttribute)(nil),        // 25: cedar.v3.ExprHasAttribute
	(*ExprLike)(nil),                // 26: cedar.v3.ExprLike
	(*ExprIs)(nil),                  // 27: cedar.v3.ExprIs
	(*ExprIfThenElse)(nil),          // 28: cedar.v3.ExprIfThenElse
	(*ExprSet)(nil),                 // 29: cedar.v3.ExprSet
	(*ExprRecord)(nil),              // 30: cedar.v3.ExprRecord
	(*ExprFuncCall)(nil),            // 31: cedar.v3.ExprFuncCall
	nil,                             // 32: cedar.v3.ExprRecord.AttributesEntry
	(*Value)(nil),                   // 33: cedar.v3.Value
}
var file_cedar_v3_expr_proto_depIdxs = []int32{
	3,  // 0: cedar.v3.Expr.value:type_name -> cedar.v3.ExprValue
	4,  // 1: cedar.v3.Expr.var:type_name -> cedar.v3.ExprVar
	5,  // 2: cedar.v3.Expr.slot:type_name -> cedar.v3.ExprSlot
	6,  // 3: cedar.v3.Expr.unknown:type_name -> cedar.v3.ExprUnknown
	7,  // 4: cedar.v3.Expr.not:type_name -> cedar.v3.ExprNot
	8,  // 5: cedar.v3.Expr.neg:type_name -> cedar.v3.ExprNeg
	9,  // 6: cedar.v3.Expr.equals:type_name -> cedar.v3.ExprEquals
	10, // 7: cedar.v3.Expr.not_equals:type_name -> cedar.v3.ExprNotEquals
	11, // 8: cedar.v3.Expr.in:type_name -> cedar.v3.ExprIn
	12, // 9: cedar.v3.Expr.less_than:type_name -> cedar.v3.ExprLessThan
	13, // 10: cedar.v3.Expr.less_than_or_equals:type_name -> cedar.v3.ExprLessThanOrEquals
	14, // 11: cedar.v3.Expr.greater_than:type_name -> cedar.v3.ExprGreaterThan
	15, // 12: cedar.v3.Expr.greater_than_or_equals:type_name -> cedar.v3.ExprGreaterThanOrEquals
	16, // 13: cedar.v3.Expr.and:type_name -> cedar.v3.ExprAnd
	17, // 14: cedar.v3.Expr.or:type_name -> cedar.v3.ExprOr
	18, // 15: cedar.v3.Expr.plus:type_name -> cedar.v3.ExprPlus
	19, // 16: cedar.v3.Expr.minus:type_name -> cedar.v3.ExprMinus
	20, // 17: cedar.v3.Expr.times:type_name -> cedar.v3.ExprTimes
	21, // 18: cedar.v3.Expr.contains:type_name -> cedar.v3.ExprContains
	22, // 19: cedar.v3.Expr.contains_all:type_name -> cedar.v3.ExprContainsAll
	23, // 20: cedar.v3.Expr.contains_any:type_name -> cedar.v3.ExprContainsAny
	24, // 21: cedar.v3.Expr.get_attribute:type_name -> cedar.v3.ExprGetAttribute
	25, // 22: cedar.v3.Expr.has_attribute:type_name -> cedar.v3.ExprHasAttribute
	26, // 23: cedar.v3.Expr.like:type_name -> cedar.v3.ExprLike
	27, // 24: cedar.v3.Expr.is:type_name -> cedar.v3.ExprIs
	28, // 25: cedar.v3.Expr.if_then_else:type_name -> cedar.v3.ExprIfThenElse
	29, // 26: cedar.v3.Expr.set:type_name -> cedar.v3.ExprSet
	30, // 27: cedar.v3.Expr.record:type_name -> cedar.v3.ExprRecord
	31, // 28: cedar.v3.Expr.func_call:type_name -> cedar.v3.ExprFuncCall
	33, // 29: cedar.v3.ExprValue.value:type_name -> cedar.v3.Value
	0,  // 30: cedar.v3.ExprVar.variable:type_name -> cedar.v3.Variable
	1,  // 31: cedar.v3.ExprSlot.slot_id:type_name -> cedar.v3.SlotId
	2,  // 32: cedar.v3.ExprNot.expr:type_name -> cedar.v3.Expr
	2,  // 33: cedar.v3.ExprNeg.expr:type_name -> cedar.v3.Expr
	2,  // 34: cedar.v3.ExprEquals.left:type_name -> cedar.v3.Expr
	2,  // 35: cedar.v3.ExprEquals.right:type_name -> cedar.v3.Expr
	2,  // 36: cedar.v3.ExprNotEquals.left:type_name -> cedar.v3.Expr
	2,  // 37: cedar.v3.ExprNotEquals.right:type_name -> cedar.v3.Expr
	2,  // 38: cedar.v3.ExprIn.left:type_name -> cedar.v3.Expr
	2,  // 39: cedar.v3.ExprIn.right:type_name -> cedar.v3.Expr
	2,  // 40: cedar.v3.ExprLessThan.left:type_name -> cedar.v3.Expr
	2,  // 41: cedar.v3.ExprLessThan.right:type_name -> cedar.v3.Expr
	2,  // 42: cedar.v3.ExprLessThanOrEquals.left:type_name -> cedar.v3.Expr
	2,  // 43: cedar.v3.ExprLessThanOrEquals.right:type_name -> cedar.v3.Expr
	2,  // 44: cedar.v3.ExprGreaterThan.left:type_name -> cedar.v3.Expr
	2,  // 45: cedar.v3.ExprGreaterThan.right:type_name -> cedar.v3.Expr
	2,  // 46: cedar.v3.ExprGreaterThanOrEquals.left:type_name -> cedar.v3.Expr
	2,  // 47: cedar.v3.ExprGreaterThanOrEquals.right:type_name -> cedar.v3.Expr
	2,  // 48: cedar.v3.ExprAnd.left:type_name -> cedar.v3.Expr
	2,  // 49: cedar.v3.ExprAnd.right:type_name -> cedar.v3.Expr
	2,  // 50: cedar.v3.ExprOr.left:type_name -> cedar.v3.Expr
	2,  // 51: cedar.v3.ExprOr.right:type_name -> cedar.v3.Expr
	2,  // 52: cedar.v3.ExprPlus.left:type_name -> cedar.v3.Expr
	2,  // 53: cedar.v3.ExprPlus.right:type_name -> cedar.v3.Expr
	2,  // 54: cedar.v3.ExprMinus.left:type_name -> cedar.v3.Expr
	2,  // 55: cedar.v3.ExprMinus.right:type_name -> cedar.v3.Expr
	2,  // 56: cedar.v3.ExprTimes.left:type_name -> cedar.v3.Expr
	2,  // 57: cedar.v3.ExprTimes.right:type_name -> cedar.v3.Expr
	2,  // 58: cedar.v3.ExprContains.left:type_name -> cedar.v3.Expr
	2,  // 59: cedar.v3.ExprContains.right:type_name -> cedar.v3.Expr
	2,  // 60: cedar.v3.ExprContainsAll.left:type_name -> cedar.v3.Expr
	2,  // 61: cedar.v3.ExprContainsAll.right:type_name -> cedar.v3.Expr
	2,  // 62: cedar.v3.ExprContainsAny.left:type_name -> cedar.v3.Expr
	2,  // 63: cedar.v3.ExprContainsAny.right:type_name -> cedar.v3.Expr
	2,  // 64: cedar.v3.ExprGetAttribute.left:type_name -> cedar.v3.Expr
	2,  // 65: cedar.v3.ExprHasAttribute.left:type_name -> cedar.v3.Expr
	2,  // 66: cedar.v3.ExprLike.left:type_name -> cedar.v3.Expr
	2,  // 67: cedar.v3.ExprIs.left:type_name -> cedar.v3.Expr
	2,  // 68: cedar.v3.ExprIs.in:type_name -> cedar.v3.Expr
	2,  // 69: cedar.v3.ExprIfThenElse.if:type_name -> cedar.v3.Expr
	2,  // 70: cedar.v3.ExprIfThenElse.then:type_name -> cedar.v3.Expr
	2,  // 71: cedar.v3.ExprIfThenElse.else:type_name -> cedar.v3.Expr
	2,  // 72: cedar.v3.ExprSet.expressions:type_name -> cedar.v3.Expr
	32, // 73: cedar.v3.ExprRecord.attributes:type_name -> cedar.v3.ExprRecord.AttributesEntry
	2,  // 74: cedar.v3.ExprFuncCall.args:type_name -> cedar.v3.Expr
	2,  // 75: cedar.v3.ExprRecord.AttributesEntry.value:type_name -> cedar.v3.Expr
	76, // [76:76] is the sub-list for method output_type
	76, // [76:76] is the sub-list for method input_type
	76, // [76:76] is the sub-list for extension type_name
	76, // [76:76] is the sub-list for extension extendee
	0,  // [0:76] is the sub-list for field type_name
}

func init() { file_cedar_v3_expr_proto_init() }
func file_cedar_v3_expr_proto_init() {
	if File_cedar_v3_expr_proto != nil {
		return
	}
	file_cedar_v3_value_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_cedar_v3_expr_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Expr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cedar_v3_expr_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ExprValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cedar_v3_expr_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ExprVar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cedar_v3_expr_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ExprSlot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cedar_v3_expr_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ExprUnknown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cedar_v3_expr_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ExprNot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cedar_v3_expr_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ExprNeg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cedar_v3_expr_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ExprEquals); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cedar_v3_expr_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*ExprNotEquals); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cedar_v3_expr_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*ExprIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cedar_v3_expr_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*ExprLessThan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cedar_v3_expr_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*ExprLessThanOrEquals); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cedar_v3_expr_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*ExprGreaterThan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cedar_v3_expr_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*ExprGreaterThanOrEquals); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cedar_v3_expr_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*ExprAnd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cedar_v3_expr_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*ExprOr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cedar_v3_expr_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*ExprPlus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cedar_v3_expr_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*ExprMinus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cedar_v3_expr_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*ExprTimes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cedar_v3_expr_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*ExprContains); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cedar_v3_expr_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*ExprContainsAll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cedar_v3_expr_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*ExprContainsAny); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cedar_v3_expr_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*ExprGetAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cedar_v3_expr_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*ExprHasAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cedar_v3_expr_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*ExprLike); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cedar_v3_expr_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*ExprIs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cedar_v3_expr_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*ExprIfThenElse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cedar_v3_expr_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*ExprSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cedar_v3_expr_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*ExprRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cedar_v3_expr_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*ExprFuncCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cedar_v3_expr_proto_msgTypes[0].OneofWrappers = []any{
		(*Expr_Value)(nil),
		(*Expr_Var)(nil),
		(*Expr_Slot)(nil),
		(*Expr_Unknown)(nil),
		(*Expr_Not)(nil),
		(*Expr_Neg)(nil),
		(*Expr_Equals)(nil),
		(*Expr_NotEquals)(nil),
		(*Expr_In)(nil),
		(*Expr_LessThan)(nil),
		(*Expr_LessThanOrEquals)(nil),
		(*Expr_GreaterThan)(nil),
		(*Expr_GreaterThanOrEquals)(nil),
		(*Expr_And)(nil),
		(*Expr_Or)(nil),
		(*Expr_Plus)(nil),
		(*Expr_Minus)(nil),
		(*Expr_Times)(nil),
		(*Expr_Contains)(nil),
		(*Expr_ContainsAll)(nil),
		(*Expr_ContainsAny)(nil),
		(*Expr_GetAttribute)(nil),
		(*Expr_HasAttribute)(nil),
		(*Expr_Like)(nil),
		(*Expr_Is)(nil),
		(*Expr_IfThenElse)(nil),
		(*Expr_Set)(nil),
		(*Expr_Record)(nil),
		(*Expr_FuncCall)(nil),
	}
	file_cedar_v3_expr_proto_msgTypes[25].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cedar_v3_expr_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cedar_v3_expr_proto_goTypes,
		DependencyIndexes: file_cedar_v3_expr_proto_depIdxs,
		EnumInfos:         file_cedar_v3_expr_proto_enumTypes,
		MessageInfos:      file_cedar_v3_expr_proto_msgTypes,
	}.Build()
	File_cedar_v3_expr_proto = out.File
	file_cedar_v3_expr_proto_rawDesc = nil
	file_cedar_v3_expr_proto_goTypes = nil
	file_cedar_v3_expr_proto_depIdxs = nil
}
