// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: cedar/v3/policy.proto

package cedarv3

import (
	_ "github.com/celest-dev/corks/go/proto/dart_options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Effect int32

const (
	Effect_EFFECT_UNSPECIFIED Effect = 0
	Effect_EFFECT_PERMIT      Effect = 1
	Effect_EFFECT_FORBID      Effect = 2
)

// Enum value maps for Effect.
var (
	Effect_name = map[int32]string{
		0: "EFFECT_UNSPECIFIED",
		1: "EFFECT_PERMIT",
		2: "EFFECT_FORBID",
	}
	Effect_value = map[string]int32{
		"EFFECT_UNSPECIFIED": 0,
		"EFFECT_PERMIT":      1,
		"EFFECT_FORBID":      2,
	}
)

func (x Effect) Enum() *Effect {
	p := new(Effect)
	*p = x
	return p
}

func (x Effect) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Effect) Descriptor() protoreflect.EnumDescriptor {
	return file_cedar_v3_policy_proto_enumTypes[0].Descriptor()
}

func (Effect) Type() protoreflect.EnumType {
	return &file_cedar_v3_policy_proto_enumTypes[0]
}

func (x Effect) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Effect.Descriptor instead.
func (Effect) EnumDescriptor() ([]byte, []int) {
	return file_cedar_v3_policy_proto_rawDescGZIP(), []int{0}
}

type ConditionKind int32

const (
	ConditionKind_CONDITION_KIND_UNSPECIFIED ConditionKind = 0
	ConditionKind_CONDITION_KIND_WHEN        ConditionKind = 1
	ConditionKind_CONDITION_KIND_UNLESS      ConditionKind = 2
)

// Enum value maps for ConditionKind.
var (
	ConditionKind_name = map[int32]string{
		0: "CONDITION_KIND_UNSPECIFIED",
		1: "CONDITION_KIND_WHEN",
		2: "CONDITION_KIND_UNLESS",
	}
	ConditionKind_value = map[string]int32{
		"CONDITION_KIND_UNSPECIFIED": 0,
		"CONDITION_KIND_WHEN":        1,
		"CONDITION_KIND_UNLESS":      2,
	}
)

func (x ConditionKind) Enum() *ConditionKind {
	p := new(ConditionKind)
	*p = x
	return p
}

func (x ConditionKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConditionKind) Descriptor() protoreflect.EnumDescriptor {
	return file_cedar_v3_policy_proto_enumTypes[1].Descriptor()
}

func (ConditionKind) Type() protoreflect.EnumType {
	return &file_cedar_v3_policy_proto_enumTypes[1]
}

func (x ConditionKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConditionKind.Descriptor instead.
func (ConditionKind) EnumDescriptor() ([]byte, []int) {
	return file_cedar_v3_policy_proto_rawDescGZIP(), []int{1}
}

type PolicySet struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Policies      map[string]*Policy     `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Templates     map[string]*Policy     `protobuf:"bytes,2,rep,name=templates,proto3" json:"templates,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	TemplateLinks []*TemplateLink        `protobuf:"bytes,3,rep,name=template_links,json=templateLinks,proto3" json:"template_links,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PolicySet) Reset() {
	*x = PolicySet{}
	mi := &file_cedar_v3_policy_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PolicySet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicySet) ProtoMessage() {}

func (x *PolicySet) ProtoReflect() protoreflect.Message {
	mi := &file_cedar_v3_policy_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicySet.ProtoReflect.Descriptor instead.
func (*PolicySet) Descriptor() ([]byte, []int) {
	return file_cedar_v3_policy_proto_rawDescGZIP(), []int{0}
}

func (x *PolicySet) GetPolicies() map[string]*Policy {
	if x != nil {
		return x.Policies
	}
	return nil
}

func (x *PolicySet) GetTemplates() map[string]*Policy {
	if x != nil {
		return x.Templates
	}
	return nil
}

func (x *PolicySet) GetTemplateLinks() []*TemplateLink {
	if x != nil {
		return x.TemplateLinks
	}
	return nil
}

type Policy struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *string                `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Effect        Effect                 `protobuf:"varint,2,opt,name=effect,proto3,enum=cedar.v3.Effect" json:"effect,omitempty"`
	Principal     *PrincipalConstraint   `protobuf:"bytes,3,opt,name=principal,proto3" json:"principal,omitempty"`
	Action        *ActionConstraint      `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
	Resource      *ResourceConstraint    `protobuf:"bytes,5,opt,name=resource,proto3" json:"resource,omitempty"`
	Conditions    []*Condition           `protobuf:"bytes,6,rep,name=conditions,proto3" json:"conditions,omitempty"`
	Annotations   *Annotations           `protobuf:"bytes,7,opt,name=annotations,proto3" json:"annotations,omitempty"`
	Position      *Position              `protobuf:"bytes,8,opt,name=position,proto3" json:"position,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Policy) Reset() {
	*x = Policy{}
	mi := &file_cedar_v3_policy_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy) ProtoMessage() {}

func (x *Policy) ProtoReflect() protoreflect.Message {
	mi := &file_cedar_v3_policy_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy.ProtoReflect.Descriptor instead.
func (*Policy) Descriptor() ([]byte, []int) {
	return file_cedar_v3_policy_proto_rawDescGZIP(), []int{1}
}

func (x *Policy) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Policy) GetEffect() Effect {
	if x != nil {
		return x.Effect
	}
	return Effect_EFFECT_UNSPECIFIED
}

func (x *Policy) GetPrincipal() *PrincipalConstraint {
	if x != nil {
		return x.Principal
	}
	return nil
}

func (x *Policy) GetAction() *ActionConstraint {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *Policy) GetResource() *ResourceConstraint {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *Policy) GetConditions() []*Condition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *Policy) GetAnnotations() *Annotations {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *Policy) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

type Annotations struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Annotations   map[string]string      `protobuf:"bytes,1,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Annotations) Reset() {
	*x = Annotations{}
	mi := &file_cedar_v3_policy_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Annotations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Annotations) ProtoMessage() {}

func (x *Annotations) ProtoReflect() protoreflect.Message {
	mi := &file_cedar_v3_policy_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Annotations.ProtoReflect.Descriptor instead.
func (*Annotations) Descriptor() ([]byte, []int) {
	return file_cedar_v3_policy_proto_rawDescGZIP(), []int{2}
}

func (x *Annotations) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

type Position struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filename      *string                `protobuf:"bytes,1,opt,name=filename,proto3,oneof" json:"filename,omitempty"`
	Offset        uint32                 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Line          uint32                 `protobuf:"varint,3,opt,name=line,proto3" json:"line,omitempty"`
	Column        uint32                 `protobuf:"varint,4,opt,name=column,proto3" json:"column,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Position) Reset() {
	*x = Position{}
	mi := &file_cedar_v3_policy_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_cedar_v3_policy_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_cedar_v3_policy_proto_rawDescGZIP(), []int{3}
}

func (x *Position) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

func (x *Position) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *Position) GetLine() uint32 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *Position) GetColumn() uint32 {
	if x != nil {
		return x.Column
	}
	return 0
}

type PrincipalConstraint struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Constraint:
	//
	//	*PrincipalConstraint_All
	//	*PrincipalConstraint_Equals
	//	*PrincipalConstraint_In
	//	*PrincipalConstraint_IsIn
	//	*PrincipalConstraint_Is
	Constraint    isPrincipalConstraint_Constraint `protobuf_oneof:"constraint"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PrincipalConstraint) Reset() {
	*x = PrincipalConstraint{}
	mi := &file_cedar_v3_policy_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrincipalConstraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrincipalConstraint) ProtoMessage() {}

func (x *PrincipalConstraint) ProtoReflect() protoreflect.Message {
	mi := &file_cedar_v3_policy_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrincipalConstraint.ProtoReflect.Descriptor instead.
func (*PrincipalConstraint) Descriptor() ([]byte, []int) {
	return file_cedar_v3_policy_proto_rawDescGZIP(), []int{4}
}

func (x *PrincipalConstraint) GetConstraint() isPrincipalConstraint_Constraint {
	if x != nil {
		return x.Constraint
	}
	return nil
}

func (x *PrincipalConstraint) GetAll() *PrincipalAll {
	if x != nil {
		if x, ok := x.Constraint.(*PrincipalConstraint_All); ok {
			return x.All
		}
	}
	return nil
}

func (x *PrincipalConstraint) GetEquals() *PrincipalEquals {
	if x != nil {
		if x, ok := x.Constraint.(*PrincipalConstraint_Equals); ok {
			return x.Equals
		}
	}
	return nil
}

func (x *PrincipalConstraint) GetIn() *PrincipalIn {
	if x != nil {
		if x, ok := x.Constraint.(*PrincipalConstraint_In); ok {
			return x.In
		}
	}
	return nil
}

func (x *PrincipalConstraint) GetIsIn() *PrincipalIsIn {
	if x != nil {
		if x, ok := x.Constraint.(*PrincipalConstraint_IsIn); ok {
			return x.IsIn
		}
	}
	return nil
}

func (x *PrincipalConstraint) GetIs() *PrincipalIs {
	if x != nil {
		if x, ok := x.Constraint.(*PrincipalConstraint_Is); ok {
			return x.Is
		}
	}
	return nil
}

type isPrincipalConstraint_Constraint interface {
	isPrincipalConstraint_Constraint()
}

type PrincipalConstraint_All struct {
	All *PrincipalAll `protobuf:"bytes,1,opt,name=all,proto3,oneof"`
}

type PrincipalConstraint_Equals struct {
	Equals *PrincipalEquals `protobuf:"bytes,2,opt,name=equals,proto3,oneof"`
}

type PrincipalConstraint_In struct {
	In *PrincipalIn `protobuf:"bytes,3,opt,name=in,proto3,oneof"`
}

type PrincipalConstraint_IsIn struct {
	IsIn *PrincipalIsIn `protobuf:"bytes,4,opt,name=is_in,json=isIn,proto3,oneof"`
}

type PrincipalConstraint_Is struct {
	Is *PrincipalIs `protobuf:"bytes,5,opt,name=is,proto3,oneof"`
}

func (*PrincipalConstraint_All) isPrincipalConstraint_Constraint() {}

func (*PrincipalConstraint_Equals) isPrincipalConstraint_Constraint() {}

func (*PrincipalConstraint_In) isPrincipalConstraint_Constraint() {}

func (*PrincipalConstraint_IsIn) isPrincipalConstraint_Constraint() {}

func (*PrincipalConstraint_Is) isPrincipalConstraint_Constraint() {}

type PrincipalAll struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PrincipalAll) Reset() {
	*x = PrincipalAll{}
	mi := &file_cedar_v3_policy_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrincipalAll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrincipalAll) ProtoMessage() {}

func (x *PrincipalAll) ProtoReflect() protoreflect.Message {
	mi := &file_cedar_v3_policy_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrincipalAll.ProtoReflect.Descriptor instead.
func (*PrincipalAll) Descriptor() ([]byte, []int) {
	return file_cedar_v3_policy_proto_rawDescGZIP(), []int{5}
}

type PrincipalEquals struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Component:
	//
	//	*PrincipalEquals_Slot
	//	*PrincipalEquals_Entity
	Component     isPrincipalEquals_Component `protobuf_oneof:"component"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PrincipalEquals) Reset() {
	*x = PrincipalEquals{}
	mi := &file_cedar_v3_policy_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrincipalEquals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrincipalEquals) ProtoMessage() {}

func (x *PrincipalEquals) ProtoReflect() protoreflect.Message {
	mi := &file_cedar_v3_policy_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrincipalEquals.ProtoReflect.Descriptor instead.
func (*PrincipalEquals) Descriptor() ([]byte, []int) {
	return file_cedar_v3_policy_proto_rawDescGZIP(), []int{6}
}

func (x *PrincipalEquals) GetComponent() isPrincipalEquals_Component {
	if x != nil {
		return x.Component
	}
	return nil
}

func (x *PrincipalEquals) GetSlot() SlotId {
	if x != nil {
		if x, ok := x.Component.(*PrincipalEquals_Slot); ok {
			return x.Slot
		}
	}
	return SlotId_SLOT_ID_UNSPECIFIED
}

func (x *PrincipalEquals) GetEntity() *EntityUid {
	if x != nil {
		if x, ok := x.Component.(*PrincipalEquals_Entity); ok {
			return x.Entity
		}
	}
	return nil
}

type isPrincipalEquals_Component interface {
	isPrincipalEquals_Component()
}

type PrincipalEquals_Slot struct {
	Slot SlotId `protobuf:"varint,1,opt,name=slot,proto3,enum=cedar.v3.SlotId,oneof"`
}

type PrincipalEquals_Entity struct {
	Entity *EntityUid `protobuf:"bytes,2,opt,name=entity,proto3,oneof"`
}

func (*PrincipalEquals_Slot) isPrincipalEquals_Component() {}

func (*PrincipalEquals_Entity) isPrincipalEquals_Component() {}

type PrincipalIn struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Component:
	//
	//	*PrincipalIn_Slot
	//	*PrincipalIn_Entity
	Component     isPrincipalIn_Component `protobuf_oneof:"component"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PrincipalIn) Reset() {
	*x = PrincipalIn{}
	mi := &file_cedar_v3_policy_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrincipalIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrincipalIn) ProtoMessage() {}

func (x *PrincipalIn) ProtoReflect() protoreflect.Message {
	mi := &file_cedar_v3_policy_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrincipalIn.ProtoReflect.Descriptor instead.
func (*PrincipalIn) Descriptor() ([]byte, []int) {
	return file_cedar_v3_policy_proto_rawDescGZIP(), []int{7}
}

func (x *PrincipalIn) GetComponent() isPrincipalIn_Component {
	if x != nil {
		return x.Component
	}
	return nil
}

func (x *PrincipalIn) GetSlot() SlotId {
	if x != nil {
		if x, ok := x.Component.(*PrincipalIn_Slot); ok {
			return x.Slot
		}
	}
	return SlotId_SLOT_ID_UNSPECIFIED
}

func (x *PrincipalIn) GetEntity() *EntityUid {
	if x != nil {
		if x, ok := x.Component.(*PrincipalIn_Entity); ok {
			return x.Entity
		}
	}
	return nil
}

type isPrincipalIn_Component interface {
	isPrincipalIn_Component()
}

type PrincipalIn_Slot struct {
	Slot SlotId `protobuf:"varint,1,opt,name=slot,proto3,enum=cedar.v3.SlotId,oneof"`
}

type PrincipalIn_Entity struct {
	Entity *EntityUid `protobuf:"bytes,2,opt,name=entity,proto3,oneof"`
}

func (*PrincipalIn_Slot) isPrincipalIn_Component() {}

func (*PrincipalIn_Entity) isPrincipalIn_Component() {}

type PrincipalIsIn struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	EntityType string                 `protobuf:"bytes,1,opt,name=entity_type,json=entityType,proto3" json:"entity_type,omitempty"`
	// Types that are valid to be assigned to In:
	//
	//	*PrincipalIsIn_Slot
	//	*PrincipalIsIn_Entity
	In            isPrincipalIsIn_In `protobuf_oneof:"in"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PrincipalIsIn) Reset() {
	*x = PrincipalIsIn{}
	mi := &file_cedar_v3_policy_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrincipalIsIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrincipalIsIn) ProtoMessage() {}

func (x *PrincipalIsIn) ProtoReflect() protoreflect.Message {
	mi := &file_cedar_v3_policy_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrincipalIsIn.ProtoReflect.Descriptor instead.
func (*PrincipalIsIn) Descriptor() ([]byte, []int) {
	return file_cedar_v3_policy_proto_rawDescGZIP(), []int{8}
}

func (x *PrincipalIsIn) GetEntityType() string {
	if x != nil {
		return x.EntityType
	}
	return ""
}

func (x *PrincipalIsIn) GetIn() isPrincipalIsIn_In {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *PrincipalIsIn) GetSlot() SlotId {
	if x != nil {
		if x, ok := x.In.(*PrincipalIsIn_Slot); ok {
			return x.Slot
		}
	}
	return SlotId_SLOT_ID_UNSPECIFIED
}

func (x *PrincipalIsIn) GetEntity() *EntityUid {
	if x != nil {
		if x, ok := x.In.(*PrincipalIsIn_Entity); ok {
			return x.Entity
		}
	}
	return nil
}

type isPrincipalIsIn_In interface {
	isPrincipalIsIn_In()
}

type PrincipalIsIn_Slot struct {
	Slot SlotId `protobuf:"varint,2,opt,name=slot,proto3,enum=cedar.v3.SlotId,oneof"`
}

type PrincipalIsIn_Entity struct {
	Entity *EntityUid `protobuf:"bytes,3,opt,name=entity,proto3,oneof"`
}

func (*PrincipalIsIn_Slot) isPrincipalIsIn_In() {}

func (*PrincipalIsIn_Entity) isPrincipalIsIn_In() {}

type PrincipalIs struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EntityType    string                 `protobuf:"bytes,1,opt,name=entity_type,json=entityType,proto3" json:"entity_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PrincipalIs) Reset() {
	*x = PrincipalIs{}
	mi := &file_cedar_v3_policy_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrincipalIs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrincipalIs) ProtoMessage() {}

func (x *PrincipalIs) ProtoReflect() protoreflect.Message {
	mi := &file_cedar_v3_policy_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrincipalIs.ProtoReflect.Descriptor instead.
func (*PrincipalIs) Descriptor() ([]byte, []int) {
	return file_cedar_v3_policy_proto_rawDescGZIP(), []int{9}
}

func (x *PrincipalIs) GetEntityType() string {
	if x != nil {
		return x.EntityType
	}
	return ""
}

type ActionConstraint struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Constraint:
	//
	//	*ActionConstraint_All
	//	*ActionConstraint_Equals
	//	*ActionConstraint_In
	//	*ActionConstraint_InSet
	Constraint    isActionConstraint_Constraint `protobuf_oneof:"constraint"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActionConstraint) Reset() {
	*x = ActionConstraint{}
	mi := &file_cedar_v3_policy_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionConstraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionConstraint) ProtoMessage() {}

func (x *ActionConstraint) ProtoReflect() protoreflect.Message {
	mi := &file_cedar_v3_policy_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionConstraint.ProtoReflect.Descriptor instead.
func (*ActionConstraint) Descriptor() ([]byte, []int) {
	return file_cedar_v3_policy_proto_rawDescGZIP(), []int{10}
}

func (x *ActionConstraint) GetConstraint() isActionConstraint_Constraint {
	if x != nil {
		return x.Constraint
	}
	return nil
}

func (x *ActionConstraint) GetAll() *ActionAll {
	if x != nil {
		if x, ok := x.Constraint.(*ActionConstraint_All); ok {
			return x.All
		}
	}
	return nil
}

func (x *ActionConstraint) GetEquals() *ActionEquals {
	if x != nil {
		if x, ok := x.Constraint.(*ActionConstraint_Equals); ok {
			return x.Equals
		}
	}
	return nil
}

func (x *ActionConstraint) GetIn() *ActionIn {
	if x != nil {
		if x, ok := x.Constraint.(*ActionConstraint_In); ok {
			return x.In
		}
	}
	return nil
}

func (x *ActionConstraint) GetInSet() *ActionInSet {
	if x != nil {
		if x, ok := x.Constraint.(*ActionConstraint_InSet); ok {
			return x.InSet
		}
	}
	return nil
}

type isActionConstraint_Constraint interface {
	isActionConstraint_Constraint()
}

type ActionConstraint_All struct {
	All *ActionAll `protobuf:"bytes,1,opt,name=all,proto3,oneof"`
}

type ActionConstraint_Equals struct {
	Equals *ActionEquals `protobuf:"bytes,2,opt,name=equals,proto3,oneof"`
}

type ActionConstraint_In struct {
	In *ActionIn `protobuf:"bytes,3,opt,name=in,proto3,oneof"`
}

type ActionConstraint_InSet struct {
	InSet *ActionInSet `protobuf:"bytes,4,opt,name=in_set,json=inSet,proto3,oneof"`
}

func (*ActionConstraint_All) isActionConstraint_Constraint() {}

func (*ActionConstraint_Equals) isActionConstraint_Constraint() {}

func (*ActionConstraint_In) isActionConstraint_Constraint() {}

func (*ActionConstraint_InSet) isActionConstraint_Constraint() {}

type ActionAll struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActionAll) Reset() {
	*x = ActionAll{}
	mi := &file_cedar_v3_policy_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionAll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionAll) ProtoMessage() {}

func (x *ActionAll) ProtoReflect() protoreflect.Message {
	mi := &file_cedar_v3_policy_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionAll.ProtoReflect.Descriptor instead.
func (*ActionAll) Descriptor() ([]byte, []int) {
	return file_cedar_v3_policy_proto_rawDescGZIP(), []int{11}
}

type ActionEquals struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entity        *EntityUid             `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActionEquals) Reset() {
	*x = ActionEquals{}
	mi := &file_cedar_v3_policy_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionEquals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionEquals) ProtoMessage() {}

func (x *ActionEquals) ProtoReflect() protoreflect.Message {
	mi := &file_cedar_v3_policy_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionEquals.ProtoReflect.Descriptor instead.
func (*ActionEquals) Descriptor() ([]byte, []int) {
	return file_cedar_v3_policy_proto_rawDescGZIP(), []int{12}
}

func (x *ActionEquals) GetEntity() *EntityUid {
	if x != nil {
		return x.Entity
	}
	return nil
}

type ActionIn struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entity        *EntityUid             `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActionIn) Reset() {
	*x = ActionIn{}
	mi := &file_cedar_v3_policy_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionIn) ProtoMessage() {}

func (x *ActionIn) ProtoReflect() protoreflect.Message {
	mi := &file_cedar_v3_policy_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionIn.ProtoReflect.Descriptor instead.
func (*ActionIn) Descriptor() ([]byte, []int) {
	return file_cedar_v3_policy_proto_rawDescGZIP(), []int{13}
}

func (x *ActionIn) GetEntity() *EntityUid {
	if x != nil {
		return x.Entity
	}
	return nil
}

type ActionInSet struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entities      []*EntityUid           `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActionInSet) Reset() {
	*x = ActionInSet{}
	mi := &file_cedar_v3_policy_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionInSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionInSet) ProtoMessage() {}

func (x *ActionInSet) ProtoReflect() protoreflect.Message {
	mi := &file_cedar_v3_policy_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionInSet.ProtoReflect.Descriptor instead.
func (*ActionInSet) Descriptor() ([]byte, []int) {
	return file_cedar_v3_policy_proto_rawDescGZIP(), []int{14}
}

func (x *ActionInSet) GetEntities() []*EntityUid {
	if x != nil {
		return x.Entities
	}
	return nil
}

type ResourceConstraint struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Constraint:
	//
	//	*ResourceConstraint_All
	//	*ResourceConstraint_Equals
	//	*ResourceConstraint_In
	//	*ResourceConstraint_IsIn
	//	*ResourceConstraint_Is
	Constraint    isResourceConstraint_Constraint `protobuf_oneof:"constraint"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResourceConstraint) Reset() {
	*x = ResourceConstraint{}
	mi := &file_cedar_v3_policy_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceConstraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceConstraint) ProtoMessage() {}

func (x *ResourceConstraint) ProtoReflect() protoreflect.Message {
	mi := &file_cedar_v3_policy_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceConstraint.ProtoReflect.Descriptor instead.
func (*ResourceConstraint) Descriptor() ([]byte, []int) {
	return file_cedar_v3_policy_proto_rawDescGZIP(), []int{15}
}

func (x *ResourceConstraint) GetConstraint() isResourceConstraint_Constraint {
	if x != nil {
		return x.Constraint
	}
	return nil
}

func (x *ResourceConstraint) GetAll() *ResourceAll {
	if x != nil {
		if x, ok := x.Constraint.(*ResourceConstraint_All); ok {
			return x.All
		}
	}
	return nil
}

func (x *ResourceConstraint) GetEquals() *ResourceEquals {
	if x != nil {
		if x, ok := x.Constraint.(*ResourceConstraint_Equals); ok {
			return x.Equals
		}
	}
	return nil
}

func (x *ResourceConstraint) GetIn() *ResourceIn {
	if x != nil {
		if x, ok := x.Constraint.(*ResourceConstraint_In); ok {
			return x.In
		}
	}
	return nil
}

func (x *ResourceConstraint) GetIsIn() *ResourceIsIn {
	if x != nil {
		if x, ok := x.Constraint.(*ResourceConstraint_IsIn); ok {
			return x.IsIn
		}
	}
	return nil
}

func (x *ResourceConstraint) GetIs() *ResourceIs {
	if x != nil {
		if x, ok := x.Constraint.(*ResourceConstraint_Is); ok {
			return x.Is
		}
	}
	return nil
}

type isResourceConstraint_Constraint interface {
	isResourceConstraint_Constraint()
}

type ResourceConstraint_All struct {
	All *ResourceAll `protobuf:"bytes,1,opt,name=all,proto3,oneof"`
}

type ResourceConstraint_Equals struct {
	Equals *ResourceEquals `protobuf:"bytes,2,opt,name=equals,proto3,oneof"`
}

type ResourceConstraint_In struct {
	In *ResourceIn `protobuf:"bytes,3,opt,name=in,proto3,oneof"`
}

type ResourceConstraint_IsIn struct {
	IsIn *ResourceIsIn `protobuf:"bytes,4,opt,name=is_in,json=isIn,proto3,oneof"`
}

type ResourceConstraint_Is struct {
	Is *ResourceIs `protobuf:"bytes,5,opt,name=is,proto3,oneof"`
}

func (*ResourceConstraint_All) isResourceConstraint_Constraint() {}

func (*ResourceConstraint_Equals) isResourceConstraint_Constraint() {}

func (*ResourceConstraint_In) isResourceConstraint_Constraint() {}

func (*ResourceConstraint_IsIn) isResourceConstraint_Constraint() {}

func (*ResourceConstraint_Is) isResourceConstraint_Constraint() {}

type ResourceAll struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResourceAll) Reset() {
	*x = ResourceAll{}
	mi := &file_cedar_v3_policy_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceAll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceAll) ProtoMessage() {}

func (x *ResourceAll) ProtoReflect() protoreflect.Message {
	mi := &file_cedar_v3_policy_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceAll.ProtoReflect.Descriptor instead.
func (*ResourceAll) Descriptor() ([]byte, []int) {
	return file_cedar_v3_policy_proto_rawDescGZIP(), []int{16}
}

type ResourceEquals struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Component:
	//
	//	*ResourceEquals_Slot
	//	*ResourceEquals_Entity
	Component     isResourceEquals_Component `protobuf_oneof:"component"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResourceEquals) Reset() {
	*x = ResourceEquals{}
	mi := &file_cedar_v3_policy_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceEquals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceEquals) ProtoMessage() {}

func (x *ResourceEquals) ProtoReflect() protoreflect.Message {
	mi := &file_cedar_v3_policy_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceEquals.ProtoReflect.Descriptor instead.
func (*ResourceEquals) Descriptor() ([]byte, []int) {
	return file_cedar_v3_policy_proto_rawDescGZIP(), []int{17}
}

func (x *ResourceEquals) GetComponent() isResourceEquals_Component {
	if x != nil {
		return x.Component
	}
	return nil
}

func (x *ResourceEquals) GetSlot() SlotId {
	if x != nil {
		if x, ok := x.Component.(*ResourceEquals_Slot); ok {
			return x.Slot
		}
	}
	return SlotId_SLOT_ID_UNSPECIFIED
}

func (x *ResourceEquals) GetEntity() *EntityUid {
	if x != nil {
		if x, ok := x.Component.(*ResourceEquals_Entity); ok {
			return x.Entity
		}
	}
	return nil
}

type isResourceEquals_Component interface {
	isResourceEquals_Component()
}

type ResourceEquals_Slot struct {
	Slot SlotId `protobuf:"varint,1,opt,name=slot,proto3,enum=cedar.v3.SlotId,oneof"`
}

type ResourceEquals_Entity struct {
	Entity *EntityUid `protobuf:"bytes,2,opt,name=entity,proto3,oneof"`
}

func (*ResourceEquals_Slot) isResourceEquals_Component() {}

func (*ResourceEquals_Entity) isResourceEquals_Component() {}

type ResourceIn struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Component:
	//
	//	*ResourceIn_Slot
	//	*ResourceIn_Entity
	Component     isResourceIn_Component `protobuf_oneof:"component"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResourceIn) Reset() {
	*x = ResourceIn{}
	mi := &file_cedar_v3_policy_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceIn) ProtoMessage() {}

func (x *ResourceIn) ProtoReflect() protoreflect.Message {
	mi := &file_cedar_v3_policy_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceIn.ProtoReflect.Descriptor instead.
func (*ResourceIn) Descriptor() ([]byte, []int) {
	return file_cedar_v3_policy_proto_rawDescGZIP(), []int{18}
}

func (x *ResourceIn) GetComponent() isResourceIn_Component {
	if x != nil {
		return x.Component
	}
	return nil
}

func (x *ResourceIn) GetSlot() SlotId {
	if x != nil {
		if x, ok := x.Component.(*ResourceIn_Slot); ok {
			return x.Slot
		}
	}
	return SlotId_SLOT_ID_UNSPECIFIED
}

func (x *ResourceIn) GetEntity() *EntityUid {
	if x != nil {
		if x, ok := x.Component.(*ResourceIn_Entity); ok {
			return x.Entity
		}
	}
	return nil
}

type isResourceIn_Component interface {
	isResourceIn_Component()
}

type ResourceIn_Slot struct {
	Slot SlotId `protobuf:"varint,1,opt,name=slot,proto3,enum=cedar.v3.SlotId,oneof"`
}

type ResourceIn_Entity struct {
	Entity *EntityUid `protobuf:"bytes,2,opt,name=entity,proto3,oneof"`
}

func (*ResourceIn_Slot) isResourceIn_Component() {}

func (*ResourceIn_Entity) isResourceIn_Component() {}

type ResourceIsIn struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	EntityType string                 `protobuf:"bytes,1,opt,name=entity_type,json=entityType,proto3" json:"entity_type,omitempty"`
	// Types that are valid to be assigned to In:
	//
	//	*ResourceIsIn_Slot
	//	*ResourceIsIn_Entity
	In            isResourceIsIn_In `protobuf_oneof:"in"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResourceIsIn) Reset() {
	*x = ResourceIsIn{}
	mi := &file_cedar_v3_policy_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceIsIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceIsIn) ProtoMessage() {}

func (x *ResourceIsIn) ProtoReflect() protoreflect.Message {
	mi := &file_cedar_v3_policy_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceIsIn.ProtoReflect.Descriptor instead.
func (*ResourceIsIn) Descriptor() ([]byte, []int) {
	return file_cedar_v3_policy_proto_rawDescGZIP(), []int{19}
}

func (x *ResourceIsIn) GetEntityType() string {
	if x != nil {
		return x.EntityType
	}
	return ""
}

func (x *ResourceIsIn) GetIn() isResourceIsIn_In {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *ResourceIsIn) GetSlot() SlotId {
	if x != nil {
		if x, ok := x.In.(*ResourceIsIn_Slot); ok {
			return x.Slot
		}
	}
	return SlotId_SLOT_ID_UNSPECIFIED
}

func (x *ResourceIsIn) GetEntity() *EntityUid {
	if x != nil {
		if x, ok := x.In.(*ResourceIsIn_Entity); ok {
			return x.Entity
		}
	}
	return nil
}

type isResourceIsIn_In interface {
	isResourceIsIn_In()
}

type ResourceIsIn_Slot struct {
	Slot SlotId `protobuf:"varint,2,opt,name=slot,proto3,enum=cedar.v3.SlotId,oneof"`
}

type ResourceIsIn_Entity struct {
	Entity *EntityUid `protobuf:"bytes,3,opt,name=entity,proto3,oneof"`
}

func (*ResourceIsIn_Slot) isResourceIsIn_In() {}

func (*ResourceIsIn_Entity) isResourceIsIn_In() {}

type ResourceIs struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EntityType    string                 `protobuf:"bytes,1,opt,name=entity_type,json=entityType,proto3" json:"entity_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResourceIs) Reset() {
	*x = ResourceIs{}
	mi := &file_cedar_v3_policy_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceIs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceIs) ProtoMessage() {}

func (x *ResourceIs) ProtoReflect() protoreflect.Message {
	mi := &file_cedar_v3_policy_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceIs.ProtoReflect.Descriptor instead.
func (*ResourceIs) Descriptor() ([]byte, []int) {
	return file_cedar_v3_policy_proto_rawDescGZIP(), []int{20}
}

func (x *ResourceIs) GetEntityType() string {
	if x != nil {
		return x.EntityType
	}
	return ""
}

type Condition struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Kind          ConditionKind          `protobuf:"varint,1,opt,name=kind,proto3,enum=cedar.v3.ConditionKind" json:"kind,omitempty"`
	Body          *Expr                  `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Condition) Reset() {
	*x = Condition{}
	mi := &file_cedar_v3_policy_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition) ProtoMessage() {}

func (x *Condition) ProtoReflect() protoreflect.Message {
	mi := &file_cedar_v3_policy_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition.ProtoReflect.Descriptor instead.
func (*Condition) Descriptor() ([]byte, []int) {
	return file_cedar_v3_policy_proto_rawDescGZIP(), []int{21}
}

func (x *Condition) GetKind() ConditionKind {
	if x != nil {
		return x.Kind
	}
	return ConditionKind_CONDITION_KIND_UNSPECIFIED
}

func (x *Condition) GetBody() *Expr {
	if x != nil {
		return x.Body
	}
	return nil
}

type TemplateLink struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TemplateId    string                 `protobuf:"bytes,1,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	NewId         string                 `protobuf:"bytes,2,opt,name=new_id,json=newId,proto3" json:"new_id,omitempty"`
	Values        map[string]*EntityUid  `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TemplateLink) Reset() {
	*x = TemplateLink{}
	mi := &file_cedar_v3_policy_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TemplateLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateLink) ProtoMessage() {}

func (x *TemplateLink) ProtoReflect() protoreflect.Message {
	mi := &file_cedar_v3_policy_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateLink.ProtoReflect.Descriptor instead.
func (*TemplateLink) Descriptor() ([]byte, []int) {
	return file_cedar_v3_policy_proto_rawDescGZIP(), []int{22}
}

func (x *TemplateLink) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *TemplateLink) GetNewId() string {
	if x != nil {
		return x.NewId
	}
	return ""
}

func (x *TemplateLink) GetValues() map[string]*EntityUid {
	if x != nil {
		return x.Values
	}
	return nil
}

var File_cedar_v3_policy_proto protoreflect.FileDescriptor

const file_cedar_v3_policy_proto_rawDesc = "" +
	"\n" +
	"\x15cedar/v3/policy.proto\x12\bcedar.v3\x1a\x19cedar/v3/entity_uid.proto\x1a\x13cedar/v3/expr.proto\x1a\x1fdart_options/dart_options.proto\"\xea\x02\n" +
	"\tPolicySet\x12=\n" +
	"\bpolicies\x18\x01 \x03(\v2!.cedar.v3.PolicySet.PoliciesEntryR\bpolicies\x12@\n" +
	"\ttemplates\x18\x02 \x03(\v2\".cedar.v3.PolicySet.TemplatesEntryR\ttemplates\x12=\n" +
	"\x0etemplate_links\x18\x03 \x03(\v2\x16.cedar.v3.TemplateLinkR\rtemplateLinks\x1aM\n" +
	"\rPoliciesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12&\n" +
	"\x05value\x18\x02 \x01(\v2\x10.cedar.v3.PolicyR\x05value:\x028\x01\x1aN\n" +
	"\x0eTemplatesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12&\n" +
	"\x05value\x18\x02 \x01(\v2\x10.cedar.v3.PolicyR\x05value:\x028\x01\"\x97\x03\n" +
	"\x06Policy\x12\x13\n" +
	"\x02id\x18\x01 \x01(\tH\x00R\x02id\x88\x01\x01\x12(\n" +
	"\x06effect\x18\x02 \x01(\x0e2\x10.cedar.v3.EffectR\x06effect\x12;\n" +
	"\tprincipal\x18\x03 \x01(\v2\x1d.cedar.v3.PrincipalConstraintR\tprincipal\x122\n" +
	"\x06action\x18\x04 \x01(\v2\x1a.cedar.v3.ActionConstraintR\x06action\x128\n" +
	"\bresource\x18\x05 \x01(\v2\x1c.cedar.v3.ResourceConstraintR\bresource\x123\n" +
	"\n" +
	"conditions\x18\x06 \x03(\v2\x13.cedar.v3.ConditionR\n" +
	"conditions\x127\n" +
	"\vannotations\x18\a \x01(\v2\x15.cedar.v3.AnnotationsR\vannotations\x12.\n" +
	"\bposition\x18\b \x01(\v2\x12.cedar.v3.PositionR\bpositionB\x05\n" +
	"\x03_id\"\x97\x01\n" +
	"\vAnnotations\x12H\n" +
	"\vannotations\x18\x01 \x03(\v2&.cedar.v3.Annotations.AnnotationsEntryR\vannotations\x1a>\n" +
	"\x10AnnotationsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"|\n" +
	"\bPosition\x12\x1f\n" +
	"\bfilename\x18\x01 \x01(\tH\x00R\bfilename\x88\x01\x01\x12\x16\n" +
	"\x06offset\x18\x02 \x01(\rR\x06offset\x12\x12\n" +
	"\x04line\x18\x03 \x01(\rR\x04line\x12\x16\n" +
	"\x06column\x18\x04 \x01(\rR\x06columnB\v\n" +
	"\t_filename\"\x90\x02\n" +
	"\x13PrincipalConstraint\x12*\n" +
	"\x03all\x18\x01 \x01(\v2\x16.cedar.v3.PrincipalAllH\x00R\x03all\x123\n" +
	"\x06equals\x18\x02 \x01(\v2\x19.cedar.v3.PrincipalEqualsH\x00R\x06equals\x121\n" +
	"\x02in\x18\x03 \x01(\v2\x15.cedar.v3.PrincipalInB\b\xba\x8f\xbem\x03in_H\x00R\x02in\x12.\n" +
	"\x05is_in\x18\x04 \x01(\v2\x17.cedar.v3.PrincipalIsInH\x00R\x04isIn\x12'\n" +
	"\x02is\x18\x05 \x01(\v2\x15.cedar.v3.PrincipalIsH\x00R\x02isB\f\n" +
	"\n" +
	"constraint\"\x0e\n" +
	"\fPrincipalAll\"u\n" +
	"\x0fPrincipalEquals\x12&\n" +
	"\x04slot\x18\x01 \x01(\x0e2\x10.cedar.v3.SlotIdH\x00R\x04slot\x12-\n" +
	"\x06entity\x18\x02 \x01(\v2\x13.cedar.v3.EntityUidH\x00R\x06entityB\v\n" +
	"\tcomponent\"q\n" +
	"\vPrincipalIn\x12&\n" +
	"\x04slot\x18\x01 \x01(\x0e2\x10.cedar.v3.SlotIdH\x00R\x04slot\x12-\n" +
	"\x06entity\x18\x02 \x01(\v2\x13.cedar.v3.EntityUidH\x00R\x06entityB\v\n" +
	"\tcomponent\"\x8d\x01\n" +
	"\rPrincipalIsIn\x12\x1f\n" +
	"\ventity_type\x18\x01 \x01(\tR\n" +
	"entityType\x12&\n" +
	"\x04slot\x18\x02 \x01(\x0e2\x10.cedar.v3.SlotIdH\x00R\x04slot\x12-\n" +
	"\x06entity\x18\x03 \x01(\v2\x13.cedar.v3.EntityUidH\x00R\x06entityB\x04\n" +
	"\x02in\".\n" +
	"\vPrincipalIs\x12\x1f\n" +
	"\ventity_type\x18\x01 \x01(\tR\n" +
	"entityType\"\xdb\x01\n" +
	"\x10ActionConstraint\x12'\n" +
	"\x03all\x18\x01 \x01(\v2\x13.cedar.v3.ActionAllH\x00R\x03all\x120\n" +
	"\x06equals\x18\x02 \x01(\v2\x16.cedar.v3.ActionEqualsH\x00R\x06equals\x12.\n" +
	"\x02in\x18\x03 \x01(\v2\x12.cedar.v3.ActionInB\b\xba\x8f\xbem\x03in_H\x00R\x02in\x12.\n" +
	"\x06in_set\x18\x04 \x01(\v2\x15.cedar.v3.ActionInSetH\x00R\x05inSetB\f\n" +
	"\n" +
	"constraint\"\v\n" +
	"\tActionAll\";\n" +
	"\fActionEquals\x12+\n" +
	"\x06entity\x18\x01 \x01(\v2\x13.cedar.v3.EntityUidR\x06entity\"7\n" +
	"\bActionIn\x12+\n" +
	"\x06entity\x18\x01 \x01(\v2\x13.cedar.v3.EntityUidR\x06entity\">\n" +
	"\vActionInSet\x12/\n" +
	"\bentities\x18\x01 \x03(\v2\x13.cedar.v3.EntityUidR\bentities\"\x8a\x02\n" +
	"\x12ResourceConstraint\x12)\n" +
	"\x03all\x18\x01 \x01(\v2\x15.cedar.v3.ResourceAllH\x00R\x03all\x122\n" +
	"\x06equals\x18\x02 \x01(\v2\x18.cedar.v3.ResourceEqualsH\x00R\x06equals\x120\n" +
	"\x02in\x18\x03 \x01(\v2\x14.cedar.v3.ResourceInB\b\xba\x8f\xbem\x03in_H\x00R\x02in\x12-\n" +
	"\x05is_in\x18\x04 \x01(\v2\x16.cedar.v3.ResourceIsInH\x00R\x04isIn\x12&\n" +
	"\x02is\x18\x05 \x01(\v2\x14.cedar.v3.ResourceIsH\x00R\x02isB\f\n" +
	"\n" +
	"constraint\"\r\n" +
	"\vResourceAll\"t\n" +
	"\x0eResourceEquals\x12&\n" +
	"\x04slot\x18\x01 \x01(\x0e2\x10.cedar.v3.SlotIdH\x00R\x04slot\x12-\n" +
	"\x06entity\x18\x02 \x01(\v2\x13.cedar.v3.EntityUidH\x00R\x06entityB\v\n" +
	"\tcomponent\"p\n" +
	"\n" +
	"ResourceIn\x12&\n" +
	"\x04slot\x18\x01 \x01(\x0e2\x10.cedar.v3.SlotIdH\x00R\x04slot\x12-\n" +
	"\x06entity\x18\x02 \x01(\v2\x13.cedar.v3.EntityUidH\x00R\x06entityB\v\n" +
	"\tcomponent\"\x8c\x01\n" +
	"\fResourceIsIn\x12\x1f\n" +
	"\ventity_type\x18\x01 \x01(\tR\n" +
	"entityType\x12&\n" +
	"\x04slot\x18\x02 \x01(\x0e2\x10.cedar.v3.SlotIdH\x00R\x04slot\x12-\n" +
	"\x06entity\x18\x03 \x01(\v2\x13.cedar.v3.EntityUidH\x00R\x06entityB\x04\n" +
	"\x02in\"-\n" +
	"\n" +
	"ResourceIs\x12\x1f\n" +
	"\ventity_type\x18\x01 \x01(\tR\n" +
	"entityType\"\\\n" +
	"\tCondition\x12+\n" +
	"\x04kind\x18\x01 \x01(\x0e2\x17.cedar.v3.ConditionKindR\x04kind\x12\"\n" +
	"\x04body\x18\x02 \x01(\v2\x0e.cedar.v3.ExprR\x04body\"\xd2\x01\n" +
	"\fTemplateLink\x12\x1f\n" +
	"\vtemplate_id\x18\x01 \x01(\tR\n" +
	"templateId\x12\x15\n" +
	"\x06new_id\x18\x02 \x01(\tR\x05newId\x12:\n" +
	"\x06values\x18\x03 \x03(\v2\".cedar.v3.TemplateLink.ValuesEntryR\x06values\x1aN\n" +
	"\vValuesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12)\n" +
	"\x05value\x18\x02 \x01(\v2\x13.cedar.v3.EntityUidR\x05value:\x028\x01*F\n" +
	"\x06Effect\x12\x16\n" +
	"\x12EFFECT_UNSPECIFIED\x10\x00\x12\x11\n" +
	"\rEFFECT_PERMIT\x10\x01\x12\x11\n" +
	"\rEFFECT_FORBID\x10\x02*c\n" +
	"\rConditionKind\x12\x1e\n" +
	"\x1aCONDITION_KIND_UNSPECIFIED\x10\x00\x12\x17\n" +
	"\x13CONDITION_KIND_WHEN\x10\x01\x12\x19\n" +
	"\x15CONDITION_KIND_UNLESS\x10\x02B\x93\x01\n" +
	"\fcom.cedar.v3B\vPolicyProtoP\x01Z5github.com/celest-dev/corks/go/proto/cedar/v3;cedarv3\xa2\x02\x03CXX\xaa\x02\bCedar.V3\xca\x02\bCedar\\V3\xe2\x02\x14Cedar\\V3\\GPBMetadata\xea\x02\tCedar::V3b\x06proto3"

var (
	file_cedar_v3_policy_proto_rawDescOnce sync.Once
	file_cedar_v3_policy_proto_rawDescData []byte
)

func file_cedar_v3_policy_proto_rawDescGZIP() []byte {
	file_cedar_v3_policy_proto_rawDescOnce.Do(func() {
		file_cedar_v3_policy_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_cedar_v3_policy_proto_rawDesc), len(file_cedar_v3_policy_proto_rawDesc)))
	})
	return file_cedar_v3_policy_proto_rawDescData
}

var file_cedar_v3_policy_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_cedar_v3_policy_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_cedar_v3_policy_proto_goTypes = []any{
	(Effect)(0),                 // 0: cedar.v3.Effect
	(ConditionKind)(0),          // 1: cedar.v3.ConditionKind
	(*PolicySet)(nil),           // 2: cedar.v3.PolicySet
	(*Policy)(nil),              // 3: cedar.v3.Policy
	(*Annotations)(nil),         // 4: cedar.v3.Annotations
	(*Position)(nil),            // 5: cedar.v3.Position
	(*PrincipalConstraint)(nil), // 6: cedar.v3.PrincipalConstraint
	(*PrincipalAll)(nil),        // 7: cedar.v3.PrincipalAll
	(*PrincipalEquals)(nil),     // 8: cedar.v3.PrincipalEquals
	(*PrincipalIn)(nil),         // 9: cedar.v3.PrincipalIn
	(*PrincipalIsIn)(nil),       // 10: cedar.v3.PrincipalIsIn
	(*PrincipalIs)(nil),         // 11: cedar.v3.PrincipalIs
	(*ActionConstraint)(nil),    // 12: cedar.v3.ActionConstraint
	(*ActionAll)(nil),           // 13: cedar.v3.ActionAll
	(*ActionEquals)(nil),        // 14: cedar.v3.ActionEquals
	(*ActionIn)(nil),            // 15: cedar.v3.ActionIn
	(*ActionInSet)(nil),         // 16: cedar.v3.ActionInSet
	(*ResourceConstraint)(nil),  // 17: cedar.v3.ResourceConstraint
	(*ResourceAll)(nil),         // 18: cedar.v3.ResourceAll
	(*ResourceEquals)(nil),      // 19: cedar.v3.ResourceEquals
	(*ResourceIn)(nil),          // 20: cedar.v3.ResourceIn
	(*ResourceIsIn)(nil),        // 21: cedar.v3.ResourceIsIn
	(*ResourceIs)(nil),          // 22: cedar.v3.ResourceIs
	(*Condition)(nil),           // 23: cedar.v3.Condition
	(*TemplateLink)(nil),        // 24: cedar.v3.TemplateLink
	nil,                         // 25: cedar.v3.PolicySet.PoliciesEntry
	nil,                         // 26: cedar.v3.PolicySet.TemplatesEntry
	nil,                         // 27: cedar.v3.Annotations.AnnotationsEntry
	nil,                         // 28: cedar.v3.TemplateLink.ValuesEntry
	(SlotId)(0),                 // 29: cedar.v3.SlotId
	(*EntityUid)(nil),           // 30: cedar.v3.EntityUid
	(*Expr)(nil),                // 31: cedar.v3.Expr
}
var file_cedar_v3_policy_proto_depIdxs = []int32{
	25, // 0: cedar.v3.PolicySet.policies:type_name -> cedar.v3.PolicySet.PoliciesEntry
	26, // 1: cedar.v3.PolicySet.templates:type_name -> cedar.v3.PolicySet.TemplatesEntry
	24, // 2: cedar.v3.PolicySet.template_links:type_name -> cedar.v3.TemplateLink
	0,  // 3: cedar.v3.Policy.effect:type_name -> cedar.v3.Effect
	6,  // 4: cedar.v3.Policy.principal:type_name -> cedar.v3.PrincipalConstraint
	12, // 5: cedar.v3.Policy.action:type_name -> cedar.v3.ActionConstraint
	17, // 6: cedar.v3.Policy.resource:type_name -> cedar.v3.ResourceConstraint
	23, // 7: cedar.v3.Policy.conditions:type_name -> cedar.v3.Condition
	4,  // 8: cedar.v3.Policy.annotations:type_name -> cedar.v3.Annotations
	5,  // 9: cedar.v3.Policy.position:type_name -> cedar.v3.Position
	27, // 10: cedar.v3.Annotations.annotations:type_name -> cedar.v3.Annotations.AnnotationsEntry
	7,  // 11: cedar.v3.PrincipalConstraint.all:type_name -> cedar.v3.PrincipalAll
	8,  // 12: cedar.v3.PrincipalConstraint.equals:type_name -> cedar.v3.PrincipalEquals
	9,  // 13: cedar.v3.PrincipalConstraint.in:type_name -> cedar.v3.PrincipalIn
	10, // 14: cedar.v3.PrincipalConstraint.is_in:type_name -> cedar.v3.PrincipalIsIn
	11, // 15: cedar.v3.PrincipalConstraint.is:type_name -> cedar.v3.PrincipalIs
	29, // 16: cedar.v3.PrincipalEquals.slot:type_name -> cedar.v3.SlotId
	30, // 17: cedar.v3.PrincipalEquals.entity:type_name -> cedar.v3.EntityUid
	29, // 18: cedar.v3.PrincipalIn.slot:type_name -> cedar.v3.SlotId
	30, // 19: cedar.v3.PrincipalIn.entity:type_name -> cedar.v3.EntityUid
	29, // 20: cedar.v3.PrincipalIsIn.slot:type_name -> cedar.v3.SlotId
	30, // 21: cedar.v3.PrincipalIsIn.entity:type_name -> cedar.v3.EntityUid
	13, // 22: cedar.v3.ActionConstraint.all:type_name -> cedar.v3.ActionAll
	14, // 23: cedar.v3.ActionConstraint.equals:type_name -> cedar.v3.ActionEquals
	15, // 24: cedar.v3.ActionConstraint.in:type_name -> cedar.v3.ActionIn
	16, // 25: cedar.v3.ActionConstraint.in_set:type_name -> cedar.v3.ActionInSet
	30, // 26: cedar.v3.ActionEquals.entity:type_name -> cedar.v3.EntityUid
	30, // 27: cedar.v3.ActionIn.entity:type_name -> cedar.v3.EntityUid
	30, // 28: cedar.v3.ActionInSet.entities:type_name -> cedar.v3.EntityUid
	18, // 29: cedar.v3.ResourceConstraint.all:type_name -> cedar.v3.ResourceAll
	19, // 30: cedar.v3.ResourceConstraint.equals:type_name -> cedar.v3.ResourceEquals
	20, // 31: cedar.v3.ResourceConstraint.in:type_name -> cedar.v3.ResourceIn
	21, // 32: cedar.v3.ResourceConstraint.is_in:type_name -> cedar.v3.ResourceIsIn
	22, // 33: cedar.v3.ResourceConstraint.is:type_name -> cedar.v3.ResourceIs
	29, // 34: cedar.v3.ResourceEquals.slot:type_name -> cedar.v3.SlotId
	30, // 35: cedar.v3.ResourceEquals.entity:type_name -> cedar.v3.EntityUid
	29, // 36: cedar.v3.ResourceIn.slot:type_name -> cedar.v3.SlotId
	30, // 37: cedar.v3.ResourceIn.entity:type_name -> cedar.v3.EntityUid
	29, // 38: cedar.v3.ResourceIsIn.slot:type_name -> cedar.v3.SlotId
	30, // 39: cedar.v3.ResourceIsIn.entity:type_name -> cedar.v3.EntityUid
	1,  // 40: cedar.v3.Condition.kind:type_name -> cedar.v3.ConditionKind
	31, // 41: cedar.v3.Condition.body:type_name -> cedar.v3.Expr
	28, // 42: cedar.v3.TemplateLink.values:type_name -> cedar.v3.TemplateLink.ValuesEntry
	3,  // 43: cedar.v3.PolicySet.PoliciesEntry.value:type_name -> cedar.v3.Policy
	3,  // 44: cedar.v3.PolicySet.TemplatesEntry.value:type_name -> cedar.v3.Policy
	30, // 45: cedar.v3.TemplateLink.ValuesEntry.value:type_name -> cedar.v3.EntityUid
	46, // [46:46] is the sub-list for method output_type
	46, // [46:46] is the sub-list for method input_type
	46, // [46:46] is the sub-list for extension type_name
	46, // [46:46] is the sub-list for extension extendee
	0,  // [0:46] is the sub-list for field type_name
}

func init() { file_cedar_v3_policy_proto_init() }
func file_cedar_v3_policy_proto_init() {
	if File_cedar_v3_policy_proto != nil {
		return
	}
	file_cedar_v3_entity_uid_proto_init()
	file_cedar_v3_expr_proto_init()
	file_cedar_v3_policy_proto_msgTypes[1].OneofWrappers = []any{}
	file_cedar_v3_policy_proto_msgTypes[3].OneofWrappers = []any{}
	file_cedar_v3_policy_proto_msgTypes[4].OneofWrappers = []any{
		(*PrincipalConstraint_All)(nil),
		(*PrincipalConstraint_Equals)(nil),
		(*PrincipalConstraint_In)(nil),
		(*PrincipalConstraint_IsIn)(nil),
		(*PrincipalConstraint_Is)(nil),
	}
	file_cedar_v3_policy_proto_msgTypes[6].OneofWrappers = []any{
		(*PrincipalEquals_Slot)(nil),
		(*PrincipalEquals_Entity)(nil),
	}
	file_cedar_v3_policy_proto_msgTypes[7].OneofWrappers = []any{
		(*PrincipalIn_Slot)(nil),
		(*PrincipalIn_Entity)(nil),
	}
	file_cedar_v3_policy_proto_msgTypes[8].OneofWrappers = []any{
		(*PrincipalIsIn_Slot)(nil),
		(*PrincipalIsIn_Entity)(nil),
	}
	file_cedar_v3_policy_proto_msgTypes[10].OneofWrappers = []any{
		(*ActionConstraint_All)(nil),
		(*ActionConstraint_Equals)(nil),
		(*ActionConstraint_In)(nil),
		(*ActionConstraint_InSet)(nil),
	}
	file_cedar_v3_policy_proto_msgTypes[15].OneofWrappers = []any{
		(*ResourceConstraint_All)(nil),
		(*ResourceConstraint_Equals)(nil),
		(*ResourceConstraint_In)(nil),
		(*ResourceConstraint_IsIn)(nil),
		(*ResourceConstraint_Is)(nil),
	}
	file_cedar_v3_policy_proto_msgTypes[17].OneofWrappers = []any{
		(*ResourceEquals_Slot)(nil),
		(*ResourceEquals_Entity)(nil),
	}
	file_cedar_v3_policy_proto_msgTypes[18].OneofWrappers = []any{
		(*ResourceIn_Slot)(nil),
		(*ResourceIn_Entity)(nil),
	}
	file_cedar_v3_policy_proto_msgTypes[19].OneofWrappers = []any{
		(*ResourceIsIn_Slot)(nil),
		(*ResourceIsIn_Entity)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_cedar_v3_policy_proto_rawDesc), len(file_cedar_v3_policy_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cedar_v3_policy_proto_goTypes,
		DependencyIndexes: file_cedar_v3_policy_proto_depIdxs,
		EnumInfos:         file_cedar_v3_policy_proto_enumTypes,
		MessageInfos:      file_cedar_v3_policy_proto_msgTypes,
	}.Build()
	File_cedar_v3_policy_proto = out.File
	file_cedar_v3_policy_proto_goTypes = nil
	file_cedar_v3_policy_proto_depIdxs = nil
}
