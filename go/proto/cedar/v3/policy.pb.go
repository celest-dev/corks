// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: cedar/v3/policy.proto

package cedarv3

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PolicyEffect int32

const (
	PolicyEffect_POLICY_EFFECT_UNSPECIFIED PolicyEffect = 0
	PolicyEffect_POLICY_EFFECT_PERMIT      PolicyEffect = 1
	PolicyEffect_POLICY_EFFECT_FORBID      PolicyEffect = 2
)

// Enum value maps for PolicyEffect.
var (
	PolicyEffect_name = map[int32]string{
		0: "POLICY_EFFECT_UNSPECIFIED",
		1: "POLICY_EFFECT_PERMIT",
		2: "POLICY_EFFECT_FORBID",
	}
	PolicyEffect_value = map[string]int32{
		"POLICY_EFFECT_UNSPECIFIED": 0,
		"POLICY_EFFECT_PERMIT":      1,
		"POLICY_EFFECT_FORBID":      2,
	}
)

func (x PolicyEffect) Enum() *PolicyEffect {
	p := new(PolicyEffect)
	*p = x
	return p
}

func (x PolicyEffect) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PolicyEffect) Descriptor() protoreflect.EnumDescriptor {
	return file_cedar_v3_policy_proto_enumTypes[0].Descriptor()
}

func (PolicyEffect) Type() protoreflect.EnumType {
	return &file_cedar_v3_policy_proto_enumTypes[0]
}

func (x PolicyEffect) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PolicyEffect.Descriptor instead.
func (PolicyEffect) EnumDescriptor() ([]byte, []int) {
	return file_cedar_v3_policy_proto_rawDescGZIP(), []int{0}
}

type PolicyOp int32

const (
	PolicyOp_POLICY_OP_UNSPECIFIED PolicyOp = 0
	PolicyOp_POLICY_OP_ALL         PolicyOp = 1
	PolicyOp_POLICY_OP_EQUALS      PolicyOp = 2
	PolicyOp_POLICY_OP_IN          PolicyOp = 3
	PolicyOp_POLICY_OP_IS          PolicyOp = 4
)

// Enum value maps for PolicyOp.
var (
	PolicyOp_name = map[int32]string{
		0: "POLICY_OP_UNSPECIFIED",
		1: "POLICY_OP_ALL",
		2: "POLICY_OP_EQUALS",
		3: "POLICY_OP_IN",
		4: "POLICY_OP_IS",
	}
	PolicyOp_value = map[string]int32{
		"POLICY_OP_UNSPECIFIED": 0,
		"POLICY_OP_ALL":         1,
		"POLICY_OP_EQUALS":      2,
		"POLICY_OP_IN":          3,
		"POLICY_OP_IS":          4,
	}
)

func (x PolicyOp) Enum() *PolicyOp {
	p := new(PolicyOp)
	*p = x
	return p
}

func (x PolicyOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PolicyOp) Descriptor() protoreflect.EnumDescriptor {
	return file_cedar_v3_policy_proto_enumTypes[1].Descriptor()
}

func (PolicyOp) Type() protoreflect.EnumType {
	return &file_cedar_v3_policy_proto_enumTypes[1]
}

func (x PolicyOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PolicyOp.Descriptor instead.
func (PolicyOp) EnumDescriptor() ([]byte, []int) {
	return file_cedar_v3_policy_proto_rawDescGZIP(), []int{1}
}

type PolicyConditionKind int32

const (
	PolicyConditionKind_POLICY_CONDITION_KIND_UNSPECIFIED PolicyConditionKind = 0
	PolicyConditionKind_POLICY_CONDITION_KIND_WHEN        PolicyConditionKind = 1
	PolicyConditionKind_POLICY_CONDITION_KIND_UNLESS      PolicyConditionKind = 2
)

// Enum value maps for PolicyConditionKind.
var (
	PolicyConditionKind_name = map[int32]string{
		0: "POLICY_CONDITION_KIND_UNSPECIFIED",
		1: "POLICY_CONDITION_KIND_WHEN",
		2: "POLICY_CONDITION_KIND_UNLESS",
	}
	PolicyConditionKind_value = map[string]int32{
		"POLICY_CONDITION_KIND_UNSPECIFIED": 0,
		"POLICY_CONDITION_KIND_WHEN":        1,
		"POLICY_CONDITION_KIND_UNLESS":      2,
	}
)

func (x PolicyConditionKind) Enum() *PolicyConditionKind {
	p := new(PolicyConditionKind)
	*p = x
	return p
}

func (x PolicyConditionKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PolicyConditionKind) Descriptor() protoreflect.EnumDescriptor {
	return file_cedar_v3_policy_proto_enumTypes[2].Descriptor()
}

func (PolicyConditionKind) Type() protoreflect.EnumType {
	return &file_cedar_v3_policy_proto_enumTypes[2]
}

func (x PolicyConditionKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PolicyConditionKind.Descriptor instead.
func (PolicyConditionKind) EnumDescriptor() ([]byte, []int) {
	return file_cedar_v3_policy_proto_rawDescGZIP(), []int{2}
}

type PolicySet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policies []*Policy `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
}

func (x *PolicySet) Reset() {
	*x = PolicySet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cedar_v3_policy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicySet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicySet) ProtoMessage() {}

func (x *PolicySet) ProtoReflect() protoreflect.Message {
	mi := &file_cedar_v3_policy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicySet.ProtoReflect.Descriptor instead.
func (*PolicySet) Descriptor() ([]byte, []int) {
	return file_cedar_v3_policy_proto_rawDescGZIP(), []int{0}
}

func (x *PolicySet) GetPolicies() []*Policy {
	if x != nil {
		return x.Policies
	}
	return nil
}

type Policy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *string            `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Effect      PolicyEffect       `protobuf:"varint,2,opt,name=effect,proto3,enum=cedar.v3.PolicyEffect" json:"effect,omitempty"`
	Principal   *PolicyPrincipal   `protobuf:"bytes,3,opt,name=principal,proto3" json:"principal,omitempty"`
	Action      *PolicyAction      `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
	Resource    *PolicyResource    `protobuf:"bytes,5,opt,name=resource,proto3" json:"resource,omitempty"`
	Conditions  []*PolicyCondition `protobuf:"bytes,6,rep,name=conditions,proto3" json:"conditions,omitempty"`
	Annotations map[string]string  `protobuf:"bytes,7,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Policy) Reset() {
	*x = Policy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cedar_v3_policy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy) ProtoMessage() {}

func (x *Policy) ProtoReflect() protoreflect.Message {
	mi := &file_cedar_v3_policy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy.ProtoReflect.Descriptor instead.
func (*Policy) Descriptor() ([]byte, []int) {
	return file_cedar_v3_policy_proto_rawDescGZIP(), []int{1}
}

func (x *Policy) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Policy) GetEffect() PolicyEffect {
	if x != nil {
		return x.Effect
	}
	return PolicyEffect_POLICY_EFFECT_UNSPECIFIED
}

func (x *Policy) GetPrincipal() *PolicyPrincipal {
	if x != nil {
		return x.Principal
	}
	return nil
}

func (x *Policy) GetAction() *PolicyAction {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *Policy) GetResource() *PolicyResource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *Policy) GetConditions() []*PolicyCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *Policy) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

type PolicyPrincipal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op         PolicyOp  `protobuf:"varint,1,opt,name=op,proto3,enum=cedar.v3.PolicyOp" json:"op,omitempty"`
	Entity     *EntityId `protobuf:"bytes,2,opt,name=entity,proto3,oneof" json:"entity,omitempty"`
	EntityType *string   `protobuf:"bytes,3,opt,name=entity_type,json=entityType,proto3,oneof" json:"entity_type,omitempty"`
}

func (x *PolicyPrincipal) Reset() {
	*x = PolicyPrincipal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cedar_v3_policy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyPrincipal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyPrincipal) ProtoMessage() {}

func (x *PolicyPrincipal) ProtoReflect() protoreflect.Message {
	mi := &file_cedar_v3_policy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyPrincipal.ProtoReflect.Descriptor instead.
func (*PolicyPrincipal) Descriptor() ([]byte, []int) {
	return file_cedar_v3_policy_proto_rawDescGZIP(), []int{2}
}

func (x *PolicyPrincipal) GetOp() PolicyOp {
	if x != nil {
		return x.Op
	}
	return PolicyOp_POLICY_OP_UNSPECIFIED
}

func (x *PolicyPrincipal) GetEntity() *EntityId {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *PolicyPrincipal) GetEntityType() string {
	if x != nil && x.EntityType != nil {
		return *x.EntityType
	}
	return ""
}

type PolicyAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op       PolicyOp    `protobuf:"varint,1,opt,name=op,proto3,enum=cedar.v3.PolicyOp" json:"op,omitempty"`
	Entity   *EntityId   `protobuf:"bytes,2,opt,name=entity,proto3,oneof" json:"entity,omitempty"`
	Entities []*EntityId `protobuf:"bytes,3,rep,name=entities,proto3" json:"entities,omitempty"`
}

func (x *PolicyAction) Reset() {
	*x = PolicyAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cedar_v3_policy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyAction) ProtoMessage() {}

func (x *PolicyAction) ProtoReflect() protoreflect.Message {
	mi := &file_cedar_v3_policy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyAction.ProtoReflect.Descriptor instead.
func (*PolicyAction) Descriptor() ([]byte, []int) {
	return file_cedar_v3_policy_proto_rawDescGZIP(), []int{3}
}

func (x *PolicyAction) GetOp() PolicyOp {
	if x != nil {
		return x.Op
	}
	return PolicyOp_POLICY_OP_UNSPECIFIED
}

func (x *PolicyAction) GetEntity() *EntityId {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *PolicyAction) GetEntities() []*EntityId {
	if x != nil {
		return x.Entities
	}
	return nil
}

type PolicyResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op         PolicyOp  `protobuf:"varint,1,opt,name=op,proto3,enum=cedar.v3.PolicyOp" json:"op,omitempty"`
	Entity     *EntityId `protobuf:"bytes,2,opt,name=entity,proto3,oneof" json:"entity,omitempty"`
	EntityType *string   `protobuf:"bytes,3,opt,name=entity_type,json=entityType,proto3,oneof" json:"entity_type,omitempty"`
}

func (x *PolicyResource) Reset() {
	*x = PolicyResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cedar_v3_policy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyResource) ProtoMessage() {}

func (x *PolicyResource) ProtoReflect() protoreflect.Message {
	mi := &file_cedar_v3_policy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyResource.ProtoReflect.Descriptor instead.
func (*PolicyResource) Descriptor() ([]byte, []int) {
	return file_cedar_v3_policy_proto_rawDescGZIP(), []int{4}
}

func (x *PolicyResource) GetOp() PolicyOp {
	if x != nil {
		return x.Op
	}
	return PolicyOp_POLICY_OP_UNSPECIFIED
}

func (x *PolicyResource) GetEntity() *EntityId {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *PolicyResource) GetEntityType() string {
	if x != nil && x.EntityType != nil {
		return *x.EntityType
	}
	return ""
}

type PolicyCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind PolicyConditionKind `protobuf:"varint,1,opt,name=kind,proto3,enum=cedar.v3.PolicyConditionKind" json:"kind,omitempty"`
	Body *Expr               `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *PolicyCondition) Reset() {
	*x = PolicyCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cedar_v3_policy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyCondition) ProtoMessage() {}

func (x *PolicyCondition) ProtoReflect() protoreflect.Message {
	mi := &file_cedar_v3_policy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyCondition.ProtoReflect.Descriptor instead.
func (*PolicyCondition) Descriptor() ([]byte, []int) {
	return file_cedar_v3_policy_proto_rawDescGZIP(), []int{5}
}

func (x *PolicyCondition) GetKind() PolicyConditionKind {
	if x != nil {
		return x.Kind
	}
	return PolicyConditionKind_POLICY_CONDITION_KIND_UNSPECIFIED
}

func (x *PolicyCondition) GetBody() *Expr {
	if x != nil {
		return x.Body
	}
	return nil
}

var File_cedar_v3_policy_proto protoreflect.FileDescriptor

var file_cedar_v3_policy_proto_rawDesc = []byte{
	0x0a, 0x15, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2f, 0x76, 0x33, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76,
	0x33, 0x1a, 0x18, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2f, 0x76, 0x33, 0x2f, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x63, 0x65, 0x64,
	0x61, 0x72, 0x2f, 0x76, 0x33, 0x2f, 0x65, 0x78, 0x70, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x39, 0x0a, 0x09, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x74, 0x12, 0x2c, 0x0a,
	0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0xb3, 0x03, 0x0a, 0x06,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x06, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x65,
	0x64, 0x61, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x52, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x70,
	0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63,
	0x69, 0x70, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x33, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76,
	0x33, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x43, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x65, 0x64,
	0x61, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69,
	0x64, 0x22, 0xa7, 0x01, 0x0a, 0x0f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x72, 0x69, 0x6e,
	0x63, 0x69, 0x70, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x4f, 0x70, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x2f, 0x0a, 0x06, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x65, 0x64, 0x61,
	0x72, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x48, 0x00, 0x52,
	0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x9e, 0x01, 0x0a, 0x0c,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x02,
	0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72,
	0x2e, 0x76, 0x33, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4f, 0x70, 0x52, 0x02, 0x6f, 0x70,
	0x12, 0x2f, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x48, 0x00, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x2e, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0xa6, 0x01, 0x0a,
	0x0e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x22, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x65,
	0x64, 0x61, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4f, 0x70, 0x52,
	0x02, 0x6f, 0x70, 0x12, 0x2f, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x48, 0x00, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x68, 0x0a, 0x0f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x76,
	0x33, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x65, 0x64, 0x61,
	0x72, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x2a,
	0x61, 0x0a, 0x0c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12,
	0x1d, 0x0a, 0x19, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18,
	0x0a, 0x14, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f,
	0x50, 0x45, 0x52, 0x4d, 0x49, 0x54, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x4f, 0x4c, 0x49,
	0x43, 0x59, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x42, 0x49, 0x44,
	0x10, 0x02, 0x2a, 0x72, 0x0a, 0x08, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4f, 0x70, 0x12, 0x19,
	0x0a, 0x15, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x4f, 0x50, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x4f, 0x4c,
	0x49, 0x43, 0x59, 0x5f, 0x4f, 0x50, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10,
	0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x4f, 0x50, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x53,
	0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x4f, 0x50, 0x5f,
	0x49, 0x4e, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x4f,
	0x50, 0x5f, 0x49, 0x53, 0x10, 0x04, 0x2a, 0x7e, 0x0a, 0x13, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x25, 0x0a,
	0x21, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x43,
	0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x57, 0x48,
	0x45, 0x4e, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x43,
	0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e,
	0x4c, 0x45, 0x53, 0x53, 0x10, 0x02, 0x42, 0x93, 0x01, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x65, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x33, 0x42, 0x0b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x65, 0x6c, 0x65, 0x73, 0x74, 0x2d, 0x64, 0x65, 0x76, 0x2f, 0x63, 0x6f,
	0x72, 0x6b, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x65, 0x64,
	0x61, 0x72, 0x2f, 0x76, 0x33, 0x3b, 0x63, 0x65, 0x64, 0x61, 0x72, 0x76, 0x33, 0xa2, 0x02, 0x03,
	0x43, 0x58, 0x58, 0xaa, 0x02, 0x08, 0x43, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x56, 0x33, 0xca, 0x02,
	0x08, 0x43, 0x65, 0x64, 0x61, 0x72, 0x5c, 0x56, 0x33, 0xe2, 0x02, 0x14, 0x43, 0x65, 0x64, 0x61,
	0x72, 0x5c, 0x56, 0x33, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x09, 0x43, 0x65, 0x64, 0x61, 0x72, 0x3a, 0x3a, 0x56, 0x33, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cedar_v3_policy_proto_rawDescOnce sync.Once
	file_cedar_v3_policy_proto_rawDescData = file_cedar_v3_policy_proto_rawDesc
)

func file_cedar_v3_policy_proto_rawDescGZIP() []byte {
	file_cedar_v3_policy_proto_rawDescOnce.Do(func() {
		file_cedar_v3_policy_proto_rawDescData = protoimpl.X.CompressGZIP(file_cedar_v3_policy_proto_rawDescData)
	})
	return file_cedar_v3_policy_proto_rawDescData
}

var file_cedar_v3_policy_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_cedar_v3_policy_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_cedar_v3_policy_proto_goTypes = []any{
	(PolicyEffect)(0),        // 0: cedar.v3.PolicyEffect
	(PolicyOp)(0),            // 1: cedar.v3.PolicyOp
	(PolicyConditionKind)(0), // 2: cedar.v3.PolicyConditionKind
	(*PolicySet)(nil),        // 3: cedar.v3.PolicySet
	(*Policy)(nil),           // 4: cedar.v3.Policy
	(*PolicyPrincipal)(nil),  // 5: cedar.v3.PolicyPrincipal
	(*PolicyAction)(nil),     // 6: cedar.v3.PolicyAction
	(*PolicyResource)(nil),   // 7: cedar.v3.PolicyResource
	(*PolicyCondition)(nil),  // 8: cedar.v3.PolicyCondition
	nil,                      // 9: cedar.v3.Policy.AnnotationsEntry
	(*EntityId)(nil),         // 10: cedar.v3.EntityId
	(*Expr)(nil),             // 11: cedar.v3.Expr
}
var file_cedar_v3_policy_proto_depIdxs = []int32{
	4,  // 0: cedar.v3.PolicySet.policies:type_name -> cedar.v3.Policy
	0,  // 1: cedar.v3.Policy.effect:type_name -> cedar.v3.PolicyEffect
	5,  // 2: cedar.v3.Policy.principal:type_name -> cedar.v3.PolicyPrincipal
	6,  // 3: cedar.v3.Policy.action:type_name -> cedar.v3.PolicyAction
	7,  // 4: cedar.v3.Policy.resource:type_name -> cedar.v3.PolicyResource
	8,  // 5: cedar.v3.Policy.conditions:type_name -> cedar.v3.PolicyCondition
	9,  // 6: cedar.v3.Policy.annotations:type_name -> cedar.v3.Policy.AnnotationsEntry
	1,  // 7: cedar.v3.PolicyPrincipal.op:type_name -> cedar.v3.PolicyOp
	10, // 8: cedar.v3.PolicyPrincipal.entity:type_name -> cedar.v3.EntityId
	1,  // 9: cedar.v3.PolicyAction.op:type_name -> cedar.v3.PolicyOp
	10, // 10: cedar.v3.PolicyAction.entity:type_name -> cedar.v3.EntityId
	10, // 11: cedar.v3.PolicyAction.entities:type_name -> cedar.v3.EntityId
	1,  // 12: cedar.v3.PolicyResource.op:type_name -> cedar.v3.PolicyOp
	10, // 13: cedar.v3.PolicyResource.entity:type_name -> cedar.v3.EntityId
	2,  // 14: cedar.v3.PolicyCondition.kind:type_name -> cedar.v3.PolicyConditionKind
	11, // 15: cedar.v3.PolicyCondition.body:type_name -> cedar.v3.Expr
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_cedar_v3_policy_proto_init() }
func file_cedar_v3_policy_proto_init() {
	if File_cedar_v3_policy_proto != nil {
		return
	}
	file_cedar_v3_entity_id_proto_init()
	file_cedar_v3_expr_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_cedar_v3_policy_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*PolicySet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cedar_v3_policy_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Policy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cedar_v3_policy_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*PolicyPrincipal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cedar_v3_policy_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*PolicyAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cedar_v3_policy_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*PolicyResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cedar_v3_policy_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*PolicyCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cedar_v3_policy_proto_msgTypes[1].OneofWrappers = []any{}
	file_cedar_v3_policy_proto_msgTypes[2].OneofWrappers = []any{}
	file_cedar_v3_policy_proto_msgTypes[3].OneofWrappers = []any{}
	file_cedar_v3_policy_proto_msgTypes[4].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cedar_v3_policy_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cedar_v3_policy_proto_goTypes,
		DependencyIndexes: file_cedar_v3_policy_proto_depIdxs,
		EnumInfos:         file_cedar_v3_policy_proto_enumTypes,
		MessageInfos:      file_cedar_v3_policy_proto_msgTypes,
	}.Build()
	File_cedar_v3_policy_proto = out.File
	file_cedar_v3_policy_proto_rawDesc = nil
	file_cedar_v3_policy_proto_goTypes = nil
	file_cedar_v3_policy_proto_depIdxs = nil
}
