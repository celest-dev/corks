// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: celest/corks/v1/cork.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Cork captures the metadata and chained MAC tail for a Celest authorization
// token.
//
// All fields participate in the HMAC chain as detailed in Spec §5.
type Cork struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Protocol version for future upgrades.
	Version uint32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"` // Spec §4 mandates value 1.
	// 192-bit nonce used to derive the per-cork root key.
	Nonce []byte `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"` // Spec §5 covers derivation details.
	// Identifier for the signing key; must point to a rotating master key.
	KeyId []byte `protobuf:"bytes,3,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	// Issuer entity (usually Celest::Service).  Stored as packed Cedar EntityUid.
	Issuer *anypb.Any `protobuf:"bytes,4,opt,name=issuer,proto3" json:"issuer,omitempty"`
	// Bearer entity representing the principal authorized to act.
	Bearer *anypb.Any `protobuf:"bytes,5,opt,name=bearer,proto3" json:"bearer,omitempty"`
	// Optional audience the cork is scoped to (e.g. downstream service).
	Audience *anypb.Any `protobuf:"bytes,6,opt,name=audience,proto3" json:"audience,omitempty"`
	// Optional structured claims (session context, device hints, etc.).
	Claims *anypb.Any `protobuf:"bytes,7,opt,name=claims,proto3" json:"claims,omitempty"`
	// Ordered caveat list evaluated during verification.
	Caveats []*Caveat `protobuf:"bytes,8,rep,name=caveats,proto3" json:"caveats,omitempty"` // See Spec §9 for registry guidance.
	// Final MAC produced by the chained signature algorithm.
	TailSignature []byte `protobuf:"bytes,9,opt,name=tail_signature,json=tailSignature,proto3" json:"tail_signature,omitempty"` // Spec §5.
	// Millisecond epoch when the cork was minted.
	IssuedAt uint64 `protobuf:"varint,10,opt,name=issued_at,json=issuedAt,proto3" json:"issued_at,omitempty"`
	// Optional expiry timestamp; omit for non-expiring corks (discouraged).
	NotAfter      uint64 `protobuf:"varint,11,opt,name=not_after,json=notAfter,proto3" json:"not_after,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Cork) Reset() {
	*x = Cork{}
	mi := &file_celest_corks_v1_cork_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Cork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cork) ProtoMessage() {}

func (x *Cork) ProtoReflect() protoreflect.Message {
	mi := &file_celest_corks_v1_cork_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cork.ProtoReflect.Descriptor instead.
func (*Cork) Descriptor() ([]byte, []int) {
	return file_celest_corks_v1_cork_proto_rawDescGZIP(), []int{0}
}

func (x *Cork) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Cork) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *Cork) GetKeyId() []byte {
	if x != nil {
		return x.KeyId
	}
	return nil
}

func (x *Cork) GetIssuer() *anypb.Any {
	if x != nil {
		return x.Issuer
	}
	return nil
}

func (x *Cork) GetBearer() *anypb.Any {
	if x != nil {
		return x.Bearer
	}
	return nil
}

func (x *Cork) GetAudience() *anypb.Any {
	if x != nil {
		return x.Audience
	}
	return nil
}

func (x *Cork) GetClaims() *anypb.Any {
	if x != nil {
		return x.Claims
	}
	return nil
}

func (x *Cork) GetCaveats() []*Caveat {
	if x != nil {
		return x.Caveats
	}
	return nil
}

func (x *Cork) GetTailSignature() []byte {
	if x != nil {
		return x.TailSignature
	}
	return nil
}

func (x *Cork) GetIssuedAt() uint64 {
	if x != nil {
		return x.IssuedAt
	}
	return 0
}

func (x *Cork) GetNotAfter() uint64 {
	if x != nil {
		return x.NotAfter
	}
	return 0
}

// Caveat restricts how a cork may be used. Placement order matters because the
// chained MAC is sensitive to the sequence of caveats.
type Caveat struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Version of the caveat wire format.
	CaveatVersion uint32 `protobuf:"varint,1,opt,name=caveat_version,json=caveatVersion,proto3" json:"caveat_version,omitempty"` // Spec §4.
	// Unique identifier so that discharges can reference the originating caveat.
	CaveatId []byte `protobuf:"bytes,2,opt,name=caveat_id,json=caveatId,proto3" json:"caveat_id,omitempty"`
	// Types that are valid to be assigned to Body:
	//
	//	*Caveat_FirstParty
	//	*Caveat_ThirdParty
	Body          isCaveat_Body `protobuf_oneof:"body"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Caveat) Reset() {
	*x = Caveat{}
	mi := &file_celest_corks_v1_cork_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Caveat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Caveat) ProtoMessage() {}

func (x *Caveat) ProtoReflect() protoreflect.Message {
	mi := &file_celest_corks_v1_cork_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Caveat.ProtoReflect.Descriptor instead.
func (*Caveat) Descriptor() ([]byte, []int) {
	return file_celest_corks_v1_cork_proto_rawDescGZIP(), []int{1}
}

func (x *Caveat) GetCaveatVersion() uint32 {
	if x != nil {
		return x.CaveatVersion
	}
	return 0
}

func (x *Caveat) GetCaveatId() []byte {
	if x != nil {
		return x.CaveatId
	}
	return nil
}

func (x *Caveat) GetBody() isCaveat_Body {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *Caveat) GetFirstParty() *FirstPartyCaveat {
	if x != nil {
		if x, ok := x.Body.(*Caveat_FirstParty); ok {
			return x.FirstParty
		}
	}
	return nil
}

func (x *Caveat) GetThirdParty() *ThirdPartyCaveat {
	if x != nil {
		if x, ok := x.Body.(*Caveat_ThirdParty); ok {
			return x.ThirdParty
		}
	}
	return nil
}

type isCaveat_Body interface {
	isCaveat_Body()
}

type Caveat_FirstParty struct {
	// First-party caveats are evaluated directly by Celest verifiers.
	FirstParty *FirstPartyCaveat `protobuf:"bytes,3,opt,name=first_party,json=firstParty,proto3,oneof"`
}

type Caveat_ThirdParty struct {
	// Third-party caveats require an external discharge.
	ThirdParty *ThirdPartyCaveat `protobuf:"bytes,4,opt,name=third_party,json=thirdParty,proto3,oneof"` // Spec §7.3.
}

func (*Caveat_FirstParty) isCaveat_Body() {}

func (*Caveat_ThirdParty) isCaveat_Body() {}

// FirstPartyCaveat encodes predicates evaluated inside the verifier.
type FirstPartyCaveat struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Namespace to avoid predicate collisions (e.g. "celest.auth").
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Predicate identifier registered in the caveat registry (Spec §9).
	Predicate string `protobuf:"bytes,2,opt,name=predicate,proto3" json:"predicate,omitempty"`
	// Deterministically packed payload containing predicate inputs.
	Payload       *anypb.Any `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FirstPartyCaveat) Reset() {
	*x = FirstPartyCaveat{}
	mi := &file_celest_corks_v1_cork_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FirstPartyCaveat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirstPartyCaveat) ProtoMessage() {}

func (x *FirstPartyCaveat) ProtoReflect() protoreflect.Message {
	mi := &file_celest_corks_v1_cork_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirstPartyCaveat.ProtoReflect.Descriptor instead.
func (*FirstPartyCaveat) Descriptor() ([]byte, []int) {
	return file_celest_corks_v1_cork_proto_rawDescGZIP(), []int{2}
}

func (x *FirstPartyCaveat) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *FirstPartyCaveat) GetPredicate() string {
	if x != nil {
		return x.Predicate
	}
	return ""
}

func (x *FirstPartyCaveat) GetPayload() *anypb.Any {
	if x != nil {
		return x.Payload
	}
	return nil
}

// ThirdPartyCaveat delegates checks to an external discharge service.
type ThirdPartyCaveat struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Logical or physical location of the discharge service.
	Location string `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	// Ciphertext delivered to the third party so it can mint a discharge.
	Ticket []byte `protobuf:"bytes,2,opt,name=ticket,proto3" json:"ticket,omitempty"`
	// AEAD payload consumed by the verifier to recover the caveat root key.
	Challenge []byte `protobuf:"bytes,3,opt,name=challenge,proto3" json:"challenge,omitempty"` // Spec §7.3.
	// Optional salt for HKDF derivations when computing third-party keys.
	Salt          []byte `protobuf:"bytes,4,opt,name=salt,proto3" json:"salt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ThirdPartyCaveat) Reset() {
	*x = ThirdPartyCaveat{}
	mi := &file_celest_corks_v1_cork_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ThirdPartyCaveat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThirdPartyCaveat) ProtoMessage() {}

func (x *ThirdPartyCaveat) ProtoReflect() protoreflect.Message {
	mi := &file_celest_corks_v1_cork_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThirdPartyCaveat.ProtoReflect.Descriptor instead.
func (*ThirdPartyCaveat) Descriptor() ([]byte, []int) {
	return file_celest_corks_v1_cork_proto_rawDescGZIP(), []int{3}
}

func (x *ThirdPartyCaveat) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *ThirdPartyCaveat) GetTicket() []byte {
	if x != nil {
		return x.Ticket
	}
	return nil
}

func (x *ThirdPartyCaveat) GetChallenge() []byte {
	if x != nil {
		return x.Challenge
	}
	return nil
}

func (x *ThirdPartyCaveat) GetSalt() []byte {
	if x != nil {
		return x.Salt
	}
	return nil
}

// ThirdPartyTicket envelopes the derived keys and context needed to issue
// a discharge. Implementations are free to define their own serialization,
// but the shared-secret helpers in the SDK rely on this structure.
type ThirdPartyTicket struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Identifier for the originating caveat.
	CaveatId []byte `protobuf:"bytes,1,opt,name=caveat_id,json=caveatId,proto3" json:"caveat_id,omitempty"`
	// Derived caveat root key shared with the verifier.
	CaveatRootKey []byte `protobuf:"bytes,2,opt,name=caveat_root_key,json=caveatRootKey,proto3" json:"caveat_root_key,omitempty"`
	// Optional context provided by the attenuator (for example request claims).
	Metadata *structpb.Struct `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Optional expiry propagated to the discharge builder.
	NotAfter      uint64 `protobuf:"varint,4,opt,name=not_after,json=notAfter,proto3" json:"not_after,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ThirdPartyTicket) Reset() {
	*x = ThirdPartyTicket{}
	mi := &file_celest_corks_v1_cork_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ThirdPartyTicket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThirdPartyTicket) ProtoMessage() {}

func (x *ThirdPartyTicket) ProtoReflect() protoreflect.Message {
	mi := &file_celest_corks_v1_cork_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThirdPartyTicket.ProtoReflect.Descriptor instead.
func (*ThirdPartyTicket) Descriptor() ([]byte, []int) {
	return file_celest_corks_v1_cork_proto_rawDescGZIP(), []int{4}
}

func (x *ThirdPartyTicket) GetCaveatId() []byte {
	if x != nil {
		return x.CaveatId
	}
	return nil
}

func (x *ThirdPartyTicket) GetCaveatRootKey() []byte {
	if x != nil {
		return x.CaveatRootKey
	}
	return nil
}

func (x *ThirdPartyTicket) GetMetadata() *structpb.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ThirdPartyTicket) GetNotAfter() uint64 {
	if x != nil {
		return x.NotAfter
	}
	return 0
}

// Discharge fulfils a third-party caveat and may add additional caveats.
type Discharge struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Version uint32                 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Nonce   []byte                 `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	KeyId   []byte                 `protobuf:"bytes,3,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	// Links back to Caveat.caveat_id so the verifier can pair discharge + caveat.
	ParentCaveatId []byte `protobuf:"bytes,4,opt,name=parent_caveat_id,json=parentCaveatId,proto3" json:"parent_caveat_id,omitempty"`
	// Third-party issuer information for auditability.
	Issuer *anypb.Any `protobuf:"bytes,5,opt,name=issuer,proto3" json:"issuer,omitempty"`
	// Additional attenuation applied by the third party.
	Caveats []*Caveat `protobuf:"bytes,6,rep,name=caveats,proto3" json:"caveats,omitempty"`
	// Discharge MAC produced using the caveat root key.
	TailSignature []byte `protobuf:"bytes,7,opt,name=tail_signature,json=tailSignature,proto3" json:"tail_signature,omitempty"` // Spec §7.3.
	IssuedAt      uint64 `protobuf:"varint,8,opt,name=issued_at,json=issuedAt,proto3" json:"issued_at,omitempty"`
	NotAfter      uint64 `protobuf:"varint,9,opt,name=not_after,json=notAfter,proto3" json:"not_after,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Discharge) Reset() {
	*x = Discharge{}
	mi := &file_celest_corks_v1_cork_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Discharge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Discharge) ProtoMessage() {}

func (x *Discharge) ProtoReflect() protoreflect.Message {
	mi := &file_celest_corks_v1_cork_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Discharge.ProtoReflect.Descriptor instead.
func (*Discharge) Descriptor() ([]byte, []int) {
	return file_celest_corks_v1_cork_proto_rawDescGZIP(), []int{5}
}

func (x *Discharge) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Discharge) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *Discharge) GetKeyId() []byte {
	if x != nil {
		return x.KeyId
	}
	return nil
}

func (x *Discharge) GetParentCaveatId() []byte {
	if x != nil {
		return x.ParentCaveatId
	}
	return nil
}

func (x *Discharge) GetIssuer() *anypb.Any {
	if x != nil {
		return x.Issuer
	}
	return nil
}

func (x *Discharge) GetCaveats() []*Caveat {
	if x != nil {
		return x.Caveats
	}
	return nil
}

func (x *Discharge) GetTailSignature() []byte {
	if x != nil {
		return x.TailSignature
	}
	return nil
}

func (x *Discharge) GetIssuedAt() uint64 {
	if x != nil {
		return x.IssuedAt
	}
	return 0
}

func (x *Discharge) GetNotAfter() uint64 {
	if x != nil {
		return x.NotAfter
	}
	return 0
}

// Expiry constrains the latest time a cork may be used.
type Expiry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NotAfter      uint64                 `protobuf:"varint,1,opt,name=not_after,json=notAfter,proto3" json:"not_after,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Expiry) Reset() {
	*x = Expiry{}
	mi := &file_celest_corks_v1_cork_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expiry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expiry) ProtoMessage() {}

func (x *Expiry) ProtoReflect() protoreflect.Message {
	mi := &file_celest_corks_v1_cork_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expiry.ProtoReflect.Descriptor instead.
func (*Expiry) Descriptor() ([]byte, []int) {
	return file_celest_corks_v1_cork_proto_rawDescGZIP(), []int{6}
}

func (x *Expiry) GetNotAfter() uint64 {
	if x != nil {
		return x.NotAfter
	}
	return 0
}

// OrganizationScope encodes Celest tenant hierarchy context.
type OrganizationScope struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	OrganizationId string                 `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	ProjectId      string                 `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	EnvironmentId  string                 `protobuf:"bytes,3,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *OrganizationScope) Reset() {
	*x = OrganizationScope{}
	mi := &file_celest_corks_v1_cork_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrganizationScope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrganizationScope) ProtoMessage() {}

func (x *OrganizationScope) ProtoReflect() protoreflect.Message {
	mi := &file_celest_corks_v1_cork_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrganizationScope.ProtoReflect.Descriptor instead.
func (*OrganizationScope) Descriptor() ([]byte, []int) {
	return file_celest_corks_v1_cork_proto_rawDescGZIP(), []int{7}
}

func (x *OrganizationScope) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *OrganizationScope) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *OrganizationScope) GetEnvironmentId() string {
	if x != nil {
		return x.EnvironmentId
	}
	return ""
}

// ActionScope enumerates allowed actions for the cork.
type ActionScope struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Actions       []string               `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActionScope) Reset() {
	*x = ActionScope{}
	mi := &file_celest_corks_v1_cork_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionScope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionScope) ProtoMessage() {}

func (x *ActionScope) ProtoReflect() protoreflect.Message {
	mi := &file_celest_corks_v1_cork_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionScope.ProtoReflect.Descriptor instead.
func (*ActionScope) Descriptor() ([]byte, []int) {
	return file_celest_corks_v1_cork_proto_rawDescGZIP(), []int{8}
}

func (x *ActionScope) GetActions() []string {
	if x != nil {
		return x.Actions
	}
	return nil
}

// IpBinding limits usage to specific CIDR ranges.
type IpBinding struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cidrs         []string               `protobuf:"bytes,1,rep,name=cidrs,proto3" json:"cidrs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IpBinding) Reset() {
	*x = IpBinding{}
	mi := &file_celest_corks_v1_cork_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IpBinding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpBinding) ProtoMessage() {}

func (x *IpBinding) ProtoReflect() protoreflect.Message {
	mi := &file_celest_corks_v1_cork_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpBinding.ProtoReflect.Descriptor instead.
func (*IpBinding) Descriptor() ([]byte, []int) {
	return file_celest_corks_v1_cork_proto_rawDescGZIP(), []int{9}
}

func (x *IpBinding) GetCidrs() []string {
	if x != nil {
		return x.Cidrs
	}
	return nil
}

// SessionState encodes versioning information for revocation.
type SessionState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Version       uint64                 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionState) Reset() {
	*x = SessionState{}
	mi := &file_celest_corks_v1_cork_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionState) ProtoMessage() {}

func (x *SessionState) ProtoReflect() protoreflect.Message {
	mi := &file_celest_corks_v1_cork_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionState.ProtoReflect.Descriptor instead.
func (*SessionState) Descriptor() ([]byte, []int) {
	return file_celest_corks_v1_cork_proto_rawDescGZIP(), []int{10}
}

func (x *SessionState) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *SessionState) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

var File_celest_corks_v1_cork_proto protoreflect.FileDescriptor

const file_celest_corks_v1_cork_proto_rawDesc = "" +
	"\n" +
	"\x1acelest/corks/v1/cork.proto\x12\x0fcelest.corks.v1\x1a\x19google/protobuf/any.proto\x1a\x1cgoogle/protobuf/struct.proto\"\x9d\x03\n" +
	"\x04Cork\x12\x18\n" +
	"\aversion\x18\x01 \x01(\rR\aversion\x12\x14\n" +
	"\x05nonce\x18\x02 \x01(\fR\x05nonce\x12\x15\n" +
	"\x06key_id\x18\x03 \x01(\fR\x05keyId\x12,\n" +
	"\x06issuer\x18\x04 \x01(\v2\x14.google.protobuf.AnyR\x06issuer\x12,\n" +
	"\x06bearer\x18\x05 \x01(\v2\x14.google.protobuf.AnyR\x06bearer\x120\n" +
	"\baudience\x18\x06 \x01(\v2\x14.google.protobuf.AnyR\baudience\x12,\n" +
	"\x06claims\x18\a \x01(\v2\x14.google.protobuf.AnyR\x06claims\x121\n" +
	"\acaveats\x18\b \x03(\v2\x17.celest.corks.v1.CaveatR\acaveats\x12%\n" +
	"\x0etail_signature\x18\t \x01(\fR\rtailSignature\x12\x1b\n" +
	"\tissued_at\x18\n" +
	" \x01(\x04R\bissuedAt\x12\x1b\n" +
	"\tnot_after\x18\v \x01(\x04R\bnotAfter\"\xe0\x01\n" +
	"\x06Caveat\x12%\n" +
	"\x0ecaveat_version\x18\x01 \x01(\rR\rcaveatVersion\x12\x1b\n" +
	"\tcaveat_id\x18\x02 \x01(\fR\bcaveatId\x12D\n" +
	"\vfirst_party\x18\x03 \x01(\v2!.celest.corks.v1.FirstPartyCaveatH\x00R\n" +
	"firstParty\x12D\n" +
	"\vthird_party\x18\x04 \x01(\v2!.celest.corks.v1.ThirdPartyCaveatH\x00R\n" +
	"thirdPartyB\x06\n" +
	"\x04body\"~\n" +
	"\x10FirstPartyCaveat\x12\x1c\n" +
	"\tnamespace\x18\x01 \x01(\tR\tnamespace\x12\x1c\n" +
	"\tpredicate\x18\x02 \x01(\tR\tpredicate\x12.\n" +
	"\apayload\x18\x03 \x01(\v2\x14.google.protobuf.AnyR\apayload\"x\n" +
	"\x10ThirdPartyCaveat\x12\x1a\n" +
	"\blocation\x18\x01 \x01(\tR\blocation\x12\x16\n" +
	"\x06ticket\x18\x02 \x01(\fR\x06ticket\x12\x1c\n" +
	"\tchallenge\x18\x03 \x01(\fR\tchallenge\x12\x12\n" +
	"\x04salt\x18\x04 \x01(\fR\x04salt\"\xa9\x01\n" +
	"\x10ThirdPartyTicket\x12\x1b\n" +
	"\tcaveat_id\x18\x01 \x01(\fR\bcaveatId\x12&\n" +
	"\x0fcaveat_root_key\x18\x02 \x01(\fR\rcaveatRootKey\x123\n" +
	"\bmetadata\x18\x03 \x01(\v2\x17.google.protobuf.StructR\bmetadata\x12\x1b\n" +
	"\tnot_after\x18\x04 \x01(\x04R\bnotAfter\"\xbe\x02\n" +
	"\tDischarge\x12\x18\n" +
	"\aversion\x18\x01 \x01(\rR\aversion\x12\x14\n" +
	"\x05nonce\x18\x02 \x01(\fR\x05nonce\x12\x15\n" +
	"\x06key_id\x18\x03 \x01(\fR\x05keyId\x12(\n" +
	"\x10parent_caveat_id\x18\x04 \x01(\fR\x0eparentCaveatId\x12,\n" +
	"\x06issuer\x18\x05 \x01(\v2\x14.google.protobuf.AnyR\x06issuer\x121\n" +
	"\acaveats\x18\x06 \x03(\v2\x17.celest.corks.v1.CaveatR\acaveats\x12%\n" +
	"\x0etail_signature\x18\a \x01(\fR\rtailSignature\x12\x1b\n" +
	"\tissued_at\x18\b \x01(\x04R\bissuedAt\x12\x1b\n" +
	"\tnot_after\x18\t \x01(\x04R\bnotAfter\"%\n" +
	"\x06Expiry\x12\x1b\n" +
	"\tnot_after\x18\x01 \x01(\x04R\bnotAfter\"\x82\x01\n" +
	"\x11OrganizationScope\x12'\n" +
	"\x0forganization_id\x18\x01 \x01(\tR\x0eorganizationId\x12\x1d\n" +
	"\n" +
	"project_id\x18\x02 \x01(\tR\tprojectId\x12%\n" +
	"\x0eenvironment_id\x18\x03 \x01(\tR\renvironmentId\"'\n" +
	"\vActionScope\x12\x18\n" +
	"\aactions\x18\x01 \x03(\tR\aactions\"!\n" +
	"\tIpBinding\x12\x14\n" +
	"\x05cidrs\x18\x01 \x03(\tR\x05cidrs\"G\n" +
	"\fSessionState\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\x12\x18\n" +
	"\aversion\x18\x02 \x01(\x04R\aversionB\x92\x01\n" +
	"\x13com.celest.corks.v1B\tCorkProtoP\x01Z\x12celest/corks/v1;v1\xa2\x02\x03CCX\xaa\x02\x0fCelest.Corks.V1\xca\x02\x0fCelest\\Corks\\V1\xe2\x02\x1bCelest\\Corks\\V1\\GPBMetadata\xea\x02\x11Celest::Corks::V1b\x06proto3"

var (
	file_celest_corks_v1_cork_proto_rawDescOnce sync.Once
	file_celest_corks_v1_cork_proto_rawDescData []byte
)

func file_celest_corks_v1_cork_proto_rawDescGZIP() []byte {
	file_celest_corks_v1_cork_proto_rawDescOnce.Do(func() {
		file_celest_corks_v1_cork_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_celest_corks_v1_cork_proto_rawDesc), len(file_celest_corks_v1_cork_proto_rawDesc)))
	})
	return file_celest_corks_v1_cork_proto_rawDescData
}

var file_celest_corks_v1_cork_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_celest_corks_v1_cork_proto_goTypes = []any{
	(*Cork)(nil),              // 0: celest.corks.v1.Cork
	(*Caveat)(nil),            // 1: celest.corks.v1.Caveat
	(*FirstPartyCaveat)(nil),  // 2: celest.corks.v1.FirstPartyCaveat
	(*ThirdPartyCaveat)(nil),  // 3: celest.corks.v1.ThirdPartyCaveat
	(*ThirdPartyTicket)(nil),  // 4: celest.corks.v1.ThirdPartyTicket
	(*Discharge)(nil),         // 5: celest.corks.v1.Discharge
	(*Expiry)(nil),            // 6: celest.corks.v1.Expiry
	(*OrganizationScope)(nil), // 7: celest.corks.v1.OrganizationScope
	(*ActionScope)(nil),       // 8: celest.corks.v1.ActionScope
	(*IpBinding)(nil),         // 9: celest.corks.v1.IpBinding
	(*SessionState)(nil),      // 10: celest.corks.v1.SessionState
	(*anypb.Any)(nil),         // 11: google.protobuf.Any
	(*structpb.Struct)(nil),   // 12: google.protobuf.Struct
}
var file_celest_corks_v1_cork_proto_depIdxs = []int32{
	11, // 0: celest.corks.v1.Cork.issuer:type_name -> google.protobuf.Any
	11, // 1: celest.corks.v1.Cork.bearer:type_name -> google.protobuf.Any
	11, // 2: celest.corks.v1.Cork.audience:type_name -> google.protobuf.Any
	11, // 3: celest.corks.v1.Cork.claims:type_name -> google.protobuf.Any
	1,  // 4: celest.corks.v1.Cork.caveats:type_name -> celest.corks.v1.Caveat
	2,  // 5: celest.corks.v1.Caveat.first_party:type_name -> celest.corks.v1.FirstPartyCaveat
	3,  // 6: celest.corks.v1.Caveat.third_party:type_name -> celest.corks.v1.ThirdPartyCaveat
	11, // 7: celest.corks.v1.FirstPartyCaveat.payload:type_name -> google.protobuf.Any
	12, // 8: celest.corks.v1.ThirdPartyTicket.metadata:type_name -> google.protobuf.Struct
	11, // 9: celest.corks.v1.Discharge.issuer:type_name -> google.protobuf.Any
	1,  // 10: celest.corks.v1.Discharge.caveats:type_name -> celest.corks.v1.Caveat
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_celest_corks_v1_cork_proto_init() }
func file_celest_corks_v1_cork_proto_init() {
	if File_celest_corks_v1_cork_proto != nil {
		return
	}
	file_celest_corks_v1_cork_proto_msgTypes[1].OneofWrappers = []any{
		(*Caveat_FirstParty)(nil),
		(*Caveat_ThirdParty)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_celest_corks_v1_cork_proto_rawDesc), len(file_celest_corks_v1_cork_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_celest_corks_v1_cork_proto_goTypes,
		DependencyIndexes: file_celest_corks_v1_cork_proto_depIdxs,
		MessageInfos:      file_celest_corks_v1_cork_proto_msgTypes,
	}.Build()
	File_celest_corks_v1_cork_proto = out.File
	file_celest_corks_v1_cork_proto_goTypes = nil
	file_celest_corks_v1_cork_proto_depIdxs = nil
}
